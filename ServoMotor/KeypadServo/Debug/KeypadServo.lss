
KeypadServo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002212  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00002212  000022a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080008e  0080008e  000022d4  2**0
                  ALLOC
  3 .stab         0000234c  00000000  00000000  000022d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001442  00000000  00000000  00004620  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000795b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008846  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000095f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009754  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000099e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a1af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 65 06 	jmp	0xcca	; 0xcca <__vector_10>
      2c:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <main>
      8a:	0c 94 07 11 	jmp	0x220e	; 0x220e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 95 10 	jmp	0x212a	; 0x212a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 85 10 	jmp	0x210a	; 0x210a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 85 10 	jmp	0x210a	; 0x210a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 95 10 	jmp	0x212a	; 0x212a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 85 10 	jmp	0x210a	; 0x210a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 85 10 	jmp	0x210a	; 0x210a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 85 10 	jmp	0x210a	; 0x210a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER_voidTimer0Init>:
#include "../DIO/DIO_interface.h"
#include "TIMER_interface.h"


void TIMER_voidTimer0Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//set normal mode
	   CLR_BIT(TCCR0,3);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	87 7f       	andi	r24, 0xF7	; 247
     b5a:	8c 93       	st	X, r24
	   CLR_BIT(TCCR0,6);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 7b       	andi	r24, 0xBF	; 191
     b68:	8c 93       	st	X, r24




	//set prescaler div by 8
	    CLR_BIT(TCCR0,0);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8e 7f       	andi	r24, 0xFE	; 254
     b76:	8c 93       	st	X, r24
	    SET_BIT(TCCR0,1);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	82 60       	ori	r24, 0x02	; 2
     b84:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,2);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8b 7f       	andi	r24, 0xFB	; 251
     b92:	8c 93       	st	X, r24


	//set preload value

		TCNT0=192;
     b94:	e2 e5       	ldi	r30, 0x52	; 82
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 ec       	ldi	r24, 0xC0	; 192
     b9a:	80 83       	st	Z, r24



	//enable overflow interrupt

		SET_BIT(TIMSK,0);
     b9c:	a9 e5       	ldi	r26, 0x59	; 89
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	e9 e5       	ldi	r30, 0x59	; 89
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	8c 93       	st	X, r24


}
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <TIMER_voidTimer0CTCInit>:

void TIMER_voidTimer0CTCInit(void)
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
	//set CTC mode

	SET_BIT(TCCR0,3);
     bb8:	a3 e5       	ldi	r26, 0x53	; 83
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e3 e5       	ldi	r30, 0x53	; 83
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	88 60       	ori	r24, 0x08	; 8
     bc4:	8c 93       	st	X, r24
	 CLR_BIT(TCCR0,6);
     bc6:	a3 e5       	ldi	r26, 0x53	; 83
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e3 e5       	ldi	r30, 0x53	; 83
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8f 7b       	andi	r24, 0xBF	; 191
     bd2:	8c 93       	st	X, r24


	// set prescalar DIV

		   CLR_BIT(TCCR0,0);
     bd4:	a3 e5       	ldi	r26, 0x53	; 83
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e3 e5       	ldi	r30, 0x53	; 83
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	8e 7f       	andi	r24, 0xFE	; 254
     be0:	8c 93       	st	X, r24
		  	    SET_BIT(TCCR0,1);
     be2:	a3 e5       	ldi	r26, 0x53	; 83
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e3 e5       	ldi	r30, 0x53	; 83
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	82 60       	ori	r24, 0x02	; 2
     bee:	8c 93       	st	X, r24
		  		CLR_BIT(TCCR0,2);
     bf0:	a3 e5       	ldi	r26, 0x53	; 83
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e3 e5       	ldi	r30, 0x53	; 83
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	8b 7f       	andi	r24, 0xFB	; 251
     bfc:	8c 93       	st	X, r24


	//enable CTC interrupt
		  		SET_BIT(TIMSK,1);
     bfe:	a9 e5       	ldi	r26, 0x59	; 89
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e9 e5       	ldi	r30, 0x59	; 89
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	80 81       	ld	r24, Z
     c08:	82 60       	ori	r24, 0x02	; 2
     c0a:	8c 93       	st	X, r24

}
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <TIMER_voidTimer0SetCompareMatchValue>:




void TIMER_voidTimer0SetCompareMatchValue(u8 Copy_u8CompareMatchValue)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	0f 92       	push	r0
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
     c1c:	89 83       	std	Y+1, r24	; 0x01

OCR0=Copy_u8CompareMatchValue;
     c1e:	ec e5       	ldi	r30, 0x5C	; 92
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	89 81       	ldd	r24, Y+1	; 0x01
     c24:	80 83       	st	Z, r24


}
     c26:	0f 90       	pop	r0
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <__vector_11>:


void __vector_11 (void) __attribute__((signal));

void __vector_11 (void)
{
     c2e:	1f 92       	push	r1
     c30:	0f 92       	push	r0
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	0f 92       	push	r0
     c36:	11 24       	eor	r1, r1
     c38:	2f 93       	push	r18
     c3a:	3f 93       	push	r19
     c3c:	4f 93       	push	r20
     c3e:	5f 93       	push	r21
     c40:	6f 93       	push	r22
     c42:	7f 93       	push	r23
     c44:	8f 93       	push	r24
     c46:	9f 93       	push	r25
     c48:	af 93       	push	r26
     c4a:	bf 93       	push	r27
     c4c:	ef 93       	push	r30
     c4e:	ff 93       	push	r31
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62

		static u16 counter=0;
		counter++;
     c58:	80 91 8f 00 	lds	r24, 0x008F
     c5c:	90 91 90 00 	lds	r25, 0x0090
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	90 93 90 00 	sts	0x0090, r25
     c66:	80 93 8f 00 	sts	0x008F, r24
		static u8 flag=0;
		if(counter==3907)
     c6a:	80 91 8f 00 	lds	r24, 0x008F
     c6e:	90 91 90 00 	lds	r25, 0x0090
     c72:	2f e0       	ldi	r18, 0x0F	; 15
     c74:	83 34       	cpi	r24, 0x43	; 67
     c76:	92 07       	cpc	r25, r18
     c78:	a9 f4       	brne	.+42     	; 0xca4 <__vector_11+0x76>
		{
			DIO_voidSetPinValue(DIO_PORTA, DIO_PIN0,flag);
     c7a:	90 91 8e 00 	lds	r25, 0x008E
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	49 2f       	mov	r20, r25
     c84:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
			TOG_BIT(flag,0);
     c88:	90 91 8e 00 	lds	r25, 0x008E
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	89 27       	eor	r24, r25
     c90:	80 93 8e 00 	sts	0x008E, r24
			TCNT0=192;
     c94:	e2 e5       	ldi	r30, 0x52	; 82
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 ec       	ldi	r24, 0xC0	; 192
     c9a:	80 83       	st	Z, r24
			counter=0;
     c9c:	10 92 90 00 	sts	0x0090, r1
     ca0:	10 92 8f 00 	sts	0x008F, r1

		}


}
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	ff 91       	pop	r31
     caa:	ef 91       	pop	r30
     cac:	bf 91       	pop	r27
     cae:	af 91       	pop	r26
     cb0:	9f 91       	pop	r25
     cb2:	8f 91       	pop	r24
     cb4:	7f 91       	pop	r23
     cb6:	6f 91       	pop	r22
     cb8:	5f 91       	pop	r21
     cba:	4f 91       	pop	r20
     cbc:	3f 91       	pop	r19
     cbe:	2f 91       	pop	r18
     cc0:	0f 90       	pop	r0
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	0f 90       	pop	r0
     cc6:	1f 90       	pop	r1
     cc8:	18 95       	reti

00000cca <__vector_10>:

void __vector_10 (void) __attribute__((signal));

void __vector_10 (void)
{
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	11 24       	eor	r1, r1
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62

		static u16 counter=0;
		counter++;
     cf4:	80 91 92 00 	lds	r24, 0x0092
     cf8:	90 91 93 00 	lds	r25, 0x0093
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	90 93 93 00 	sts	0x0093, r25
     d02:	80 93 92 00 	sts	0x0092, r24
		static u8 flag=0;
		if(counter==4000)
     d06:	80 91 92 00 	lds	r24, 0x0092
     d0a:	90 91 93 00 	lds	r25, 0x0093
     d0e:	2f e0       	ldi	r18, 0x0F	; 15
     d10:	80 3a       	cpi	r24, 0xA0	; 160
     d12:	92 07       	cpc	r25, r18
     d14:	89 f4       	brne	.+34     	; 0xd38 <__vector_10+0x6e>
		{
			DIO_voidSetPinValue(DIO_PORTA, DIO_PIN0,flag);
     d16:	90 91 91 00 	lds	r25, 0x0091
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	49 2f       	mov	r20, r25
     d20:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
			TOG_BIT(flag,0);
     d24:	90 91 91 00 	lds	r25, 0x0091
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	89 27       	eor	r24, r25
     d2c:	80 93 91 00 	sts	0x0091, r24

			counter=0;
     d30:	10 92 93 00 	sts	0x0093, r1
     d34:	10 92 92 00 	sts	0x0092, r1

		}


}
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	ff 91       	pop	r31
     d3e:	ef 91       	pop	r30
     d40:	bf 91       	pop	r27
     d42:	af 91       	pop	r26
     d44:	9f 91       	pop	r25
     d46:	8f 91       	pop	r24
     d48:	7f 91       	pop	r23
     d4a:	6f 91       	pop	r22
     d4c:	5f 91       	pop	r21
     d4e:	4f 91       	pop	r20
     d50:	3f 91       	pop	r19
     d52:	2f 91       	pop	r18
     d54:	0f 90       	pop	r0
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	0f 90       	pop	r0
     d5a:	1f 90       	pop	r1
     d5c:	18 95       	reti

00000d5e <TIMER_voidSetBusyWaitTimer0_ms>:
void TIMER_voidSetBusyWaitTimer0_ms(u32 Copy_u32Time_ms)
{
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	00 d0       	rcall	.+0      	; 0xd64 <TIMER_voidSetBusyWaitTimer0_ms+0x6>
     d64:	00 d0       	rcall	.+0      	; 0xd66 <TIMER_voidSetBusyWaitTimer0_ms+0x8>
     d66:	00 d0       	rcall	.+0      	; 0xd68 <TIMER_voidSetBusyWaitTimer0_ms+0xa>
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
	TIMER_voidTimer0SetCompareMatchValue(250);
     d70:	8a ef       	ldi	r24, 0xFA	; 250
     d72:	0e 94 09 06 	call	0xc12	; 0xc12 <TIMER_voidTimer0SetCompareMatchValue>
	// delay copy_time * 1sec
	for(u16 Local_u16Counter1=0;Local_u16Counter1<Copy_u32Time_ms;Local_u16Counter1++)
     d76:	1c 82       	std	Y+4, r1	; 0x04
     d78:	1b 82       	std	Y+3, r1	; 0x03
     d7a:	23 c0       	rjmp	.+70     	; 0xdc2 <TIMER_voidSetBusyWaitTimer0_ms+0x64>
	{
		// delay 1 sec
	for(u16 Local_u16Counter2=0;Local_u16Counter2<4;Local_u16Counter2++)
     d7c:	1a 82       	std	Y+2, r1	; 0x02
     d7e:	19 82       	std	Y+1, r1	; 0x01
     d80:	16 c0       	rjmp	.+44     	; 0xdae <TIMER_voidSetBusyWaitTimer0_ms+0x50>
	{
	while(GET_BIT(TIFR,1)==0);
     d82:	e8 e5       	ldi	r30, 0x58	; 88
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	86 95       	lsr	r24
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	81 70       	andi	r24, 0x01	; 1
     d90:	90 70       	andi	r25, 0x00	; 0
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	b1 f3       	breq	.-20     	; 0xd82 <TIMER_voidSetBusyWaitTimer0_ms+0x24>

	SET_BIT(TIFR,1);
     d96:	a8 e5       	ldi	r26, 0x58	; 88
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e8 e5       	ldi	r30, 0x58	; 88
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	82 60       	ori	r24, 0x02	; 2
     da2:	8c 93       	st	X, r24
	TIMER_voidTimer0SetCompareMatchValue(250);
	// delay copy_time * 1sec
	for(u16 Local_u16Counter1=0;Local_u16Counter1<Copy_u32Time_ms;Local_u16Counter1++)
	{
		// delay 1 sec
	for(u16 Local_u16Counter2=0;Local_u16Counter2<4;Local_u16Counter2++)
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	89 83       	std	Y+1, r24	; 0x01
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	84 30       	cpi	r24, 0x04	; 4
     db4:	91 05       	cpc	r25, r1
     db6:	28 f3       	brcs	.-54     	; 0xd82 <TIMER_voidSetBusyWaitTimer0_ms+0x24>
}
void TIMER_voidSetBusyWaitTimer0_ms(u32 Copy_u32Time_ms)
{
	TIMER_voidTimer0SetCompareMatchValue(250);
	// delay copy_time * 1sec
	for(u16 Local_u16Counter1=0;Local_u16Counter1<Copy_u32Time_ms;Local_u16Counter1++)
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	9c 81       	ldd	r25, Y+4	; 0x04
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	9c 83       	std	Y+4, r25	; 0x04
     dc0:	8b 83       	std	Y+3, r24	; 0x03
     dc2:	2b 81       	ldd	r18, Y+3	; 0x03
     dc4:	3c 81       	ldd	r19, Y+4	; 0x04
     dc6:	8d 81       	ldd	r24, Y+5	; 0x05
     dc8:	9e 81       	ldd	r25, Y+6	; 0x06
     dca:	28 17       	cp	r18, r24
     dcc:	39 07       	cpc	r19, r25
     dce:	b0 f2       	brcs	.-84     	; 0xd7c <TIMER_voidSetBusyWaitTimer0_ms+0x1e>
	SET_BIT(TIFR,1);


	}
	}
}
     dd0:	26 96       	adiw	r28, 0x06	; 6
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <TIMER_voidTimer2FastPWM>:



void TIMER_voidTimer2FastPWM(void)

{//set  fast pwm
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2,3);
     dea:	a5 e4       	ldi	r26, 0x45	; 69
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e5 e4       	ldi	r30, 0x45	; 69
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	88 60       	ori	r24, 0x08	; 8
     df6:	8c 93       	st	X, r24
	SET_BIT(TCCR2,6);
     df8:	a5 e4       	ldi	r26, 0x45	; 69
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e5 e4       	ldi	r30, 0x45	; 69
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 64       	ori	r24, 0x40	; 64
     e04:	8c 93       	st	X, r24

	//set prescaler div 8
	CLR_BIT(TCCR2,0);
     e06:	a5 e4       	ldi	r26, 0x45	; 69
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e5 e4       	ldi	r30, 0x45	; 69
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8e 7f       	andi	r24, 0xFE	; 254
     e12:	8c 93       	st	X, r24
	SET_BIT(TCCR2,1);
     e14:	a5 e4       	ldi	r26, 0x45	; 69
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e5 e4       	ldi	r30, 0x45	; 69
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	82 60       	ori	r24, 0x02	; 2
     e20:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,2);
     e22:	a5 e4       	ldi	r26, 0x45	; 69
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e5 e4       	ldi	r30, 0x45	; 69
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8b 7f       	andi	r24, 0xFB	; 251
     e2e:	8c 93       	st	X, r24

	//NON inverted mode

	SET_BIT(TCCR2,5);
     e30:	a5 e4       	ldi	r26, 0x45	; 69
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e5 e4       	ldi	r30, 0x45	; 69
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 62       	ori	r24, 0x20	; 32
     e3c:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,4);
     e3e:	a5 e4       	ldi	r26, 0x45	; 69
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e4       	ldi	r30, 0x45	; 69
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	8f 7e       	andi	r24, 0xEF	; 239
     e4a:	8c 93       	st	X, r24

}
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <TIMER_voidTimer2SetCompareMatchVakue>:
void TIMER_voidTimer2SetCompareMatchVakue(u8 Copy_u8CompareMatchValue)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	0f 92       	push	r0
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8CompareMatchValue;
     e5e:	e3 e4       	ldi	r30, 0x43	; 67
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	80 83       	st	Z, r24


}
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <TIMER_voidTimer1Init>:

void TIMER_voidTimer1Init(void)
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
	//set prescaler div by 8
	CLR_BIT(TCCR1B,0);
     e76:	ae e4       	ldi	r26, 0x4E	; 78
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	ee e4       	ldi	r30, 0x4E	; 78
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	8e 7f       	andi	r24, 0xFE	; 254
     e82:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
     e84:	ae e4       	ldi	r26, 0x4E	; 78
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	ee e4       	ldi	r30, 0x4E	; 78
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	82 60       	ori	r24, 0x02	; 2
     e90:	8c 93       	st	X, r24

	CLR_BIT(TCCR1B,2);
     e92:	ae e4       	ldi	r26, 0x4E	; 78
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	ee e4       	ldi	r30, 0x4E	; 78
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	8b 7f       	andi	r24, 0xFB	; 251
     e9e:	8c 93       	st	X, r24



	//set pwm mode clear on compare set at top

	SET_BIT(TCCR1A,7);
     ea0:	af e4       	ldi	r26, 0x4F	; 79
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	ef e4       	ldi	r30, 0x4F	; 79
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	80 68       	ori	r24, 0x80	; 128
     eac:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,6);
     eae:	af e4       	ldi	r26, 0x4F	; 79
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ef e4       	ldi	r30, 0x4F	; 79
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	8f 7b       	andi	r24, 0xBF	; 191
     eba:	8c 93       	st	X, r24

	//SET mode 14

	CLR_BIT(TCCR1A,0);
     ebc:	af e4       	ldi	r26, 0x4F	; 79
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	ef e4       	ldi	r30, 0x4F	; 79
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8e 7f       	andi	r24, 0xFE	; 254
     ec8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
     eca:	af e4       	ldi	r26, 0x4F	; 79
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	ef e4       	ldi	r30, 0x4F	; 79
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	82 60       	ori	r24, 0x02	; 2
     ed6:	8c 93       	st	X, r24

	SET_BIT(TCCR1B,3);
     ed8:	ae e4       	ldi	r26, 0x4E	; 78
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	ee e4       	ldi	r30, 0x4E	; 78
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	88 60       	ori	r24, 0x08	; 8
     ee4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
     ee6:	ae e4       	ldi	r26, 0x4E	; 78
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	ee e4       	ldi	r30, 0x4E	; 78
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 61       	ori	r24, 0x10	; 16
     ef2:	8c 93       	st	X, r24




}
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <TIMER_voidSetTimer1OverFlowValue>:
void TIMER_voidSetTimer1OverFlowValue(u16 Copy_u16OverFlowValue)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <TIMER_voidSetTimer1OverFlowValue+0x6>
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	89 83       	std	Y+1, r24	; 0x01

	ICR1=Copy_u16OverFlowValue;
     f08:	e6 e4       	ldi	r30, 0x46	; 70
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24

}
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <TIMER_voidTimer1ChannelASetCompareMatchValue>:
void TIMER_voidTimer1ChannelASetCompareMatchValue(u16 Copy_u16CompareMatchValue)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	00 d0       	rcall	.+0      	; 0xf24 <TIMER_voidTimer1ChannelASetCompareMatchValue+0x6>
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	9a 83       	std	Y+2, r25	; 0x02
     f2a:	89 83       	std	Y+1, r24	; 0x01

	OCR1A=Copy_u16CompareMatchValue;
     f2c:	ea e4       	ldi	r30, 0x4A	; 74
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	91 83       	std	Z+1, r25	; 0x01
     f36:	80 83       	st	Z, r24

}
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <TIMER1_voidFastPWM>:
void TIMER1_voidFastPWM(void)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
	// fast PWM
	CLR_BIT(TCCR1A, WGM10);
     f4a:	af e4       	ldi	r26, 0x4F	; 79
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	ef e4       	ldi	r30, 0x4F	; 79
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	8e 7f       	andi	r24, 0xFE	; 254
     f56:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
     f58:	af e4       	ldi	r26, 0x4F	; 79
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	ef e4       	ldi	r30, 0x4F	; 79
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	82 60       	ori	r24, 0x02	; 2
     f64:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
     f66:	ae e4       	ldi	r26, 0x4E	; 78
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	ee e4       	ldi	r30, 0x4E	; 78
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	88 60       	ori	r24, 0x08	; 8
     f72:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
     f74:	ae e4       	ldi	r26, 0x4E	; 78
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ee e4       	ldi	r30, 0x4E	; 78
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 61       	ori	r24, 0x10	; 16
     f80:	8c 93       	st	X, r24

	/* CLEAR OC1A */
	CLR_BIT(TCCR1A, COM1A0); 	// CLEAR OC1A
     f82:	af e4       	ldi	r26, 0x4F	; 79
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	ef e4       	ldi	r30, 0x4F	; 79
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8f 7b       	andi	r24, 0xBF	; 191
     f8e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
     f90:	af e4       	ldi	r26, 0x4F	; 79
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ef e4       	ldi	r30, 0x4F	; 79
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 68       	ori	r24, 0x80	; 128
     f9c:	8c 93       	st	X, r24


	ICR1 = 19999;
     f9e:	e6 e4       	ldi	r30, 0x46	; 70
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	8f e1       	ldi	r24, 0x1F	; 31
     fa4:	9e e4       	ldi	r25, 0x4E	; 78
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	80 83       	st	Z, r24

	// div by 8
	CLR_BIT(TCCR1B, CS10);
     faa:	ae e4       	ldi	r26, 0x4E	; 78
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	ee e4       	ldi	r30, 0x4E	; 78
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	8e 7f       	andi	r24, 0xFE	; 254
     fb6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
     fb8:	ae e4       	ldi	r26, 0x4E	; 78
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ee e4       	ldi	r30, 0x4E	; 78
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	82 60       	ori	r24, 0x02	; 2
     fc4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
     fc6:	ae e4       	ldi	r26, 0x4E	; 78
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	ee e4       	ldi	r30, 0x4E	; 78
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8b 7f       	andi	r24, 0xFB	; 251
     fd2:	8c 93       	st	X, r24
}
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <SERVO_voidSetAngle>:
void SERVO_voidSetAngle(u8 copy_u8Angle)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	0f 92       	push	r0
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = ((50* copy_u8Angle)+8991)/9;
     fe6:	ea e4       	ldi	r30, 0x4A	; 74
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	82 e3       	ldi	r24, 0x32	; 50
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	ac 01       	movw	r20, r24
     ff6:	24 9f       	mul	r18, r20
     ff8:	c0 01       	movw	r24, r0
     ffa:	25 9f       	mul	r18, r21
     ffc:	90 0d       	add	r25, r0
     ffe:	34 9f       	mul	r19, r20
    1000:	90 0d       	add	r25, r0
    1002:	11 24       	eor	r1, r1
    1004:	81 5e       	subi	r24, 0xE1	; 225
    1006:	9c 4d       	sbci	r25, 0xDC	; 220
    1008:	29 e0       	ldi	r18, 0x09	; 9
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	b9 01       	movw	r22, r18
    100e:	0e 94 52 10 	call	0x20a4	; 0x20a4 <__divmodhi4>
    1012:	cb 01       	movw	r24, r22
    1014:	91 83       	std	Z+1, r25	; 0x01
    1016:	80 83       	st	Z, r24
}
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <GIE_voidEnableGlobalInterrupt>:
#include "../../LIB/BIT_MATH.h"
#include "../../LIB/STD_TYPES.h"
#include "GIE_interface.h"

void GIE_voidEnableGlobalInterrupt()
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    1028:	af e5       	ldi	r26, 0x5F	; 95
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ef e5       	ldi	r30, 0x5F	; 95
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	80 68       	ori	r24, 0x80	; 128
    1034:	8c 93       	st	X, r24
}
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <GIE_voidDisableGlobalInterrupt>:

void GIE_voidDisableGlobalInterrupt()
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    1044:	af e5       	ldi	r26, 0x5F	; 95
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	ef e5       	ldi	r30, 0x5F	; 95
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8f 77       	andi	r24, 0x7F	; 127
    1050:	8c 93       	st	X, r24


}
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <DIO_voidSetPinDirection>:
#include "DIO_interface.h"



void DIO_voidSetPinDirection(u8 Copy_u8portName,u8 Copy_u8PinNumber,u8 Copy_pinstate)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	2d 97       	sbiw	r28, 0x0d	; 13
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	89 83       	std	Y+1, r24	; 0x01
    106e:	6a 83       	std	Y+2, r22	; 0x02
    1070:	4b 83       	std	Y+3, r20	; 0x03
switch(Copy_u8portName)
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	3d 87       	std	Y+13, r19	; 0x0d
    107a:	2c 87       	std	Y+12, r18	; 0x0c
    107c:	8c 85       	ldd	r24, Y+12	; 0x0c
    107e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	91 05       	cpc	r25, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <DIO_voidSetPinDirection+0x30>
    1086:	4f c0       	rjmp	.+158    	; 0x1126 <DIO_voidSetPinDirection+0xce>
    1088:	2c 85       	ldd	r18, Y+12	; 0x0c
    108a:	3d 85       	ldd	r19, Y+13	; 0x0d
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	2c f4       	brge	.+10     	; 0x109c <DIO_voidSetPinDirection+0x44>
    1092:	8c 85       	ldd	r24, Y+12	; 0x0c
    1094:	9d 85       	ldd	r25, Y+13	; 0x0d
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	71 f0       	breq	.+28     	; 0x10b6 <DIO_voidSetPinDirection+0x5e>
    109a:	eb c0       	rjmp	.+470    	; 0x1272 <DIO_voidSetPinDirection+0x21a>
    109c:	2c 85       	ldd	r18, Y+12	; 0x0c
    109e:	3d 85       	ldd	r19, Y+13	; 0x0d
    10a0:	22 30       	cpi	r18, 0x02	; 2
    10a2:	31 05       	cpc	r19, r1
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <DIO_voidSetPinDirection+0x50>
    10a6:	77 c0       	rjmp	.+238    	; 0x1196 <DIO_voidSetPinDirection+0x13e>
    10a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    10ac:	83 30       	cpi	r24, 0x03	; 3
    10ae:	91 05       	cpc	r25, r1
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <DIO_voidSetPinDirection+0x5c>
    10b2:	a9 c0       	rjmp	.+338    	; 0x1206 <DIO_voidSetPinDirection+0x1ae>
    10b4:	de c0       	rjmp	.+444    	; 0x1272 <DIO_voidSetPinDirection+0x21a>
{

case DIO_PORTA:
	switch(Copy_pinstate)
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3b 87       	std	Y+11, r19	; 0x0b
    10be:	2a 87       	std	Y+10, r18	; 0x0a
    10c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    10c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	d1 f0       	breq	.+52     	; 0x10fc <DIO_voidSetPinDirection+0xa4>
    10c8:	2a 85       	ldd	r18, Y+10	; 0x0a
    10ca:	3b 85       	ldd	r19, Y+11	; 0x0b
    10cc:	21 30       	cpi	r18, 0x01	; 1
    10ce:	31 05       	cpc	r19, r1
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <DIO_voidSetPinDirection+0x7c>
    10d2:	cf c0       	rjmp	.+414    	; 0x1272 <DIO_voidSetPinDirection+0x21a>
	{
		case OUTPUT:
			SET_BIT(DDRA,Copy_u8PinNumber);
    10d4:	aa e3       	ldi	r26, 0x3A	; 58
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	ea e3       	ldi	r30, 0x3A	; 58
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_voidSetPinDirection+0x9a>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_voidSetPinDirection+0x96>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	bb c0       	rjmp	.+374    	; 0x1272 <DIO_voidSetPinDirection+0x21a>

			break;
		case INPUT:
			CLR_BIT(DDRA,Copy_u8PinNumber);
    10fc:	aa e3       	ldi	r26, 0x3A	; 58
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	ea e3       	ldi	r30, 0x3A	; 58
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_voidSetPinDirection+0xc2>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_voidSetPinDirection+0xbe>
    111e:	80 95       	com	r24
    1120:	84 23       	and	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	a6 c0       	rjmp	.+332    	; 0x1272 <DIO_voidSetPinDirection+0x21a>
	}
	break;
case DIO_PORTB:


	switch(Copy_pinstate)
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	39 87       	std	Y+9, r19	; 0x09
    112e:	28 87       	std	Y+8, r18	; 0x08
    1130:	88 85       	ldd	r24, Y+8	; 0x08
    1132:	99 85       	ldd	r25, Y+9	; 0x09
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	d1 f0       	breq	.+52     	; 0x116c <DIO_voidSetPinDirection+0x114>
    1138:	28 85       	ldd	r18, Y+8	; 0x08
    113a:	39 85       	ldd	r19, Y+9	; 0x09
    113c:	21 30       	cpi	r18, 0x01	; 1
    113e:	31 05       	cpc	r19, r1
    1140:	09 f0       	breq	.+2      	; 0x1144 <DIO_voidSetPinDirection+0xec>
    1142:	97 c0       	rjmp	.+302    	; 0x1272 <DIO_voidSetPinDirection+0x21a>
	{
		case OUTPUT:
			SET_BIT(DDRB,Copy_u8PinNumber);
    1144:	a7 e3       	ldi	r26, 0x37	; 55
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e7 e3       	ldi	r30, 0x37	; 55
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_voidSetPinDirection+0x10a>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_voidSetPinDirection+0x106>
    1166:	84 2b       	or	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	83 c0       	rjmp	.+262    	; 0x1272 <DIO_voidSetPinDirection+0x21a>

			break;
		case INPUT:
			CLR_BIT(DDRB,Copy_u8PinNumber);
    116c:	a7 e3       	ldi	r26, 0x37	; 55
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e7 e3       	ldi	r30, 0x37	; 55
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_voidSetPinDirection+0x132>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_voidSetPinDirection+0x12e>
    118e:	80 95       	com	r24
    1190:	84 23       	and	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	6e c0       	rjmp	.+220    	; 0x1272 <DIO_voidSetPinDirection+0x21a>
	}

	break;
case DIO_PORTC:

	switch(Copy_pinstate)
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3f 83       	std	Y+7, r19	; 0x07
    119e:	2e 83       	std	Y+6, r18	; 0x06
    11a0:	8e 81       	ldd	r24, Y+6	; 0x06
    11a2:	9f 81       	ldd	r25, Y+7	; 0x07
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	d1 f0       	breq	.+52     	; 0x11dc <DIO_voidSetPinDirection+0x184>
    11a8:	2e 81       	ldd	r18, Y+6	; 0x06
    11aa:	3f 81       	ldd	r19, Y+7	; 0x07
    11ac:	21 30       	cpi	r18, 0x01	; 1
    11ae:	31 05       	cpc	r19, r1
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <DIO_voidSetPinDirection+0x15c>
    11b2:	5f c0       	rjmp	.+190    	; 0x1272 <DIO_voidSetPinDirection+0x21a>
	{
		case OUTPUT:
			SET_BIT(DDRC,Copy_u8PinNumber);
    11b4:	a4 e3       	ldi	r26, 0x34	; 52
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e4 e3       	ldi	r30, 0x34	; 52
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_voidSetPinDirection+0x17a>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_voidSetPinDirection+0x176>
    11d6:	84 2b       	or	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	4b c0       	rjmp	.+150    	; 0x1272 <DIO_voidSetPinDirection+0x21a>

			break;
		case INPUT:
			CLR_BIT(DDRC,Copy_u8PinNumber);
    11dc:	a4 e3       	ldi	r26, 0x34	; 52
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e4 e3       	ldi	r30, 0x34	; 52
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <DIO_voidSetPinDirection+0x1a2>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <DIO_voidSetPinDirection+0x19e>
    11fe:	80 95       	com	r24
    1200:	84 23       	and	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	36 c0       	rjmp	.+108    	; 0x1272 <DIO_voidSetPinDirection+0x21a>
	}

	break;
case DIO_PORTD:

	switch(Copy_pinstate)
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	3d 83       	std	Y+5, r19	; 0x05
    120e:	2c 83       	std	Y+4, r18	; 0x04
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	c9 f0       	breq	.+50     	; 0x124a <DIO_voidSetPinDirection+0x1f2>
    1218:	2c 81       	ldd	r18, Y+4	; 0x04
    121a:	3d 81       	ldd	r19, Y+5	; 0x05
    121c:	21 30       	cpi	r18, 0x01	; 1
    121e:	31 05       	cpc	r19, r1
    1220:	41 f5       	brne	.+80     	; 0x1272 <DIO_voidSetPinDirection+0x21a>
	{
		case OUTPUT:
			SET_BIT(DDRD,Copy_u8PinNumber);
    1222:	a1 e3       	ldi	r26, 0x31	; 49
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e1 e3       	ldi	r30, 0x31	; 49
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_voidSetPinDirection+0x1e8>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_voidSetPinDirection+0x1e4>
    1244:	84 2b       	or	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	14 c0       	rjmp	.+40     	; 0x1272 <DIO_voidSetPinDirection+0x21a>

			break;
		case INPUT:
			CLR_BIT(DDRD,Copy_u8PinNumber);
    124a:	a1 e3       	ldi	r26, 0x31	; 49
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e1 e3       	ldi	r30, 0x31	; 49
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_voidSetPinDirection+0x210>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_voidSetPinDirection+0x20c>
    126c:	80 95       	com	r24
    126e:	84 23       	and	r24, r20
    1270:	8c 93       	st	X, r24
	break;


}

}
    1272:	2d 96       	adiw	r28, 0x0d	; 13
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8portName,u8 Copy_u8PinNumber,u8 Copy_pinvalue)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	2d 97       	sbiw	r28, 0x0d	; 13
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	6a 83       	std	Y+2, r22	; 0x02
    129c:	4b 83       	std	Y+3, r20	; 0x03

	switch(Copy_u8portName)
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	28 2f       	mov	r18, r24
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	3d 87       	std	Y+13, r19	; 0x0d
    12a6:	2c 87       	std	Y+12, r18	; 0x0c
    12a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    12aa:	9d 85       	ldd	r25, Y+13	; 0x0d
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <DIO_voidSetPinValue+0x30>
    12b2:	4f c0       	rjmp	.+158    	; 0x1352 <DIO_voidSetPinValue+0xce>
    12b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    12b6:	3d 85       	ldd	r19, Y+13	; 0x0d
    12b8:	22 30       	cpi	r18, 0x02	; 2
    12ba:	31 05       	cpc	r19, r1
    12bc:	2c f4       	brge	.+10     	; 0x12c8 <DIO_voidSetPinValue+0x44>
    12be:	8c 85       	ldd	r24, Y+12	; 0x0c
    12c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	71 f0       	breq	.+28     	; 0x12e2 <DIO_voidSetPinValue+0x5e>
    12c6:	eb c0       	rjmp	.+470    	; 0x149e <DIO_voidSetPinValue+0x21a>
    12c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ca:	3d 85       	ldd	r19, Y+13	; 0x0d
    12cc:	22 30       	cpi	r18, 0x02	; 2
    12ce:	31 05       	cpc	r19, r1
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <DIO_voidSetPinValue+0x50>
    12d2:	77 c0       	rjmp	.+238    	; 0x13c2 <DIO_voidSetPinValue+0x13e>
    12d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    12d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    12d8:	83 30       	cpi	r24, 0x03	; 3
    12da:	91 05       	cpc	r25, r1
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <DIO_voidSetPinValue+0x5c>
    12de:	a9 c0       	rjmp	.+338    	; 0x1432 <DIO_voidSetPinValue+0x1ae>
    12e0:	de c0       	rjmp	.+444    	; 0x149e <DIO_voidSetPinValue+0x21a>
	{

	case DIO_PORTA:
		switch(Copy_pinvalue)
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3b 87       	std	Y+11, r19	; 0x0b
    12ea:	2a 87       	std	Y+10, r18	; 0x0a
    12ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    12ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    12f0:	00 97       	sbiw	r24, 0x00	; 0
    12f2:	d1 f0       	breq	.+52     	; 0x1328 <DIO_voidSetPinValue+0xa4>
    12f4:	2a 85       	ldd	r18, Y+10	; 0x0a
    12f6:	3b 85       	ldd	r19, Y+11	; 0x0b
    12f8:	21 30       	cpi	r18, 0x01	; 1
    12fa:	31 05       	cpc	r19, r1
    12fc:	09 f0       	breq	.+2      	; 0x1300 <DIO_voidSetPinValue+0x7c>
    12fe:	cf c0       	rjmp	.+414    	; 0x149e <DIO_voidSetPinValue+0x21a>
		{
			case HIGH:
				SET_BIT(PORTA,Copy_u8PinNumber);
    1300:	ab e3       	ldi	r26, 0x3B	; 59
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	eb e3       	ldi	r30, 0x3B	; 59
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_voidSetPinValue+0x9a>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <DIO_voidSetPinValue+0x96>
    1322:	84 2b       	or	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	bb c0       	rjmp	.+374    	; 0x149e <DIO_voidSetPinValue+0x21a>

				break;
			case LOW:
				CLR_BIT(PORTA,Copy_u8PinNumber);
    1328:	ab e3       	ldi	r26, 0x3B	; 59
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	eb e3       	ldi	r30, 0x3B	; 59
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_voidSetPinValue+0xc2>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_voidSetPinValue+0xbe>
    134a:	80 95       	com	r24
    134c:	84 23       	and	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	a6 c0       	rjmp	.+332    	; 0x149e <DIO_voidSetPinValue+0x21a>
		}
		break;
	case DIO_PORTB:


		switch(Copy_pinvalue)
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	39 87       	std	Y+9, r19	; 0x09
    135a:	28 87       	std	Y+8, r18	; 0x08
    135c:	88 85       	ldd	r24, Y+8	; 0x08
    135e:	99 85       	ldd	r25, Y+9	; 0x09
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	d1 f0       	breq	.+52     	; 0x1398 <DIO_voidSetPinValue+0x114>
    1364:	28 85       	ldd	r18, Y+8	; 0x08
    1366:	39 85       	ldd	r19, Y+9	; 0x09
    1368:	21 30       	cpi	r18, 0x01	; 1
    136a:	31 05       	cpc	r19, r1
    136c:	09 f0       	breq	.+2      	; 0x1370 <DIO_voidSetPinValue+0xec>
    136e:	97 c0       	rjmp	.+302    	; 0x149e <DIO_voidSetPinValue+0x21a>
		{
			case HIGH:
				SET_BIT(PORTB,Copy_u8PinNumber);
    1370:	a8 e3       	ldi	r26, 0x38	; 56
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e8 e3       	ldi	r30, 0x38	; 56
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_voidSetPinValue+0x10a>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_voidSetPinValue+0x106>
    1392:	84 2b       	or	r24, r20
    1394:	8c 93       	st	X, r24
    1396:	83 c0       	rjmp	.+262    	; 0x149e <DIO_voidSetPinValue+0x21a>

				break;
			case LOW:
				CLR_BIT(PORTB,Copy_u8PinNumber);
    1398:	a8 e3       	ldi	r26, 0x38	; 56
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e8 e3       	ldi	r30, 0x38	; 56
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_voidSetPinValue+0x132>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_voidSetPinValue+0x12e>
    13ba:	80 95       	com	r24
    13bc:	84 23       	and	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	6e c0       	rjmp	.+220    	; 0x149e <DIO_voidSetPinValue+0x21a>
		}

		break;
	case DIO_PORTC:

		switch(Copy_pinvalue)
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3f 83       	std	Y+7, r19	; 0x07
    13ca:	2e 83       	std	Y+6, r18	; 0x06
    13cc:	8e 81       	ldd	r24, Y+6	; 0x06
    13ce:	9f 81       	ldd	r25, Y+7	; 0x07
    13d0:	00 97       	sbiw	r24, 0x00	; 0
    13d2:	d1 f0       	breq	.+52     	; 0x1408 <DIO_voidSetPinValue+0x184>
    13d4:	2e 81       	ldd	r18, Y+6	; 0x06
    13d6:	3f 81       	ldd	r19, Y+7	; 0x07
    13d8:	21 30       	cpi	r18, 0x01	; 1
    13da:	31 05       	cpc	r19, r1
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <DIO_voidSetPinValue+0x15c>
    13de:	5f c0       	rjmp	.+190    	; 0x149e <DIO_voidSetPinValue+0x21a>
		{
			case HIGH:
				SET_BIT(PORTC,Copy_u8PinNumber);
    13e0:	a5 e3       	ldi	r26, 0x35	; 53
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e5 e3       	ldi	r30, 0x35	; 53
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_voidSetPinValue+0x17a>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_voidSetPinValue+0x176>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	4b c0       	rjmp	.+150    	; 0x149e <DIO_voidSetPinValue+0x21a>

				break;
			case LOW:
				CLR_BIT(PORTC,Copy_u8PinNumber);
    1408:	a5 e3       	ldi	r26, 0x35	; 53
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e3       	ldi	r30, 0x35	; 53
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_voidSetPinValue+0x1a2>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_voidSetPinValue+0x19e>
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	36 c0       	rjmp	.+108    	; 0x149e <DIO_voidSetPinValue+0x21a>
		}

		break;
	case DIO_PORTD:

		switch(Copy_pinvalue)
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3d 83       	std	Y+5, r19	; 0x05
    143a:	2c 83       	std	Y+4, r18	; 0x04
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	9d 81       	ldd	r25, Y+5	; 0x05
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	c9 f0       	breq	.+50     	; 0x1476 <DIO_voidSetPinValue+0x1f2>
    1444:	2c 81       	ldd	r18, Y+4	; 0x04
    1446:	3d 81       	ldd	r19, Y+5	; 0x05
    1448:	21 30       	cpi	r18, 0x01	; 1
    144a:	31 05       	cpc	r19, r1
    144c:	41 f5       	brne	.+80     	; 0x149e <DIO_voidSetPinValue+0x21a>
		{
			case HIGH:
				SET_BIT(PORTD,Copy_u8PinNumber);
    144e:	a2 e3       	ldi	r26, 0x32	; 50
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e2 e3       	ldi	r30, 0x32	; 50
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_voidSetPinValue+0x1e8>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_voidSetPinValue+0x1e4>
    1470:	84 2b       	or	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	14 c0       	rjmp	.+40     	; 0x149e <DIO_voidSetPinValue+0x21a>

				break;
			case LOW:
				CLR_BIT(PORTD,Copy_u8PinNumber);
    1476:	a2 e3       	ldi	r26, 0x32	; 50
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e2 e3       	ldi	r30, 0x32	; 50
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_voidSetPinValue+0x210>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_voidSetPinValue+0x20c>
    1498:	80 95       	com	r24
    149a:	84 23       	and	r24, r20
    149c:	8c 93       	st	X, r24
	}




}
    149e:	2d 96       	adiw	r28, 0x0d	; 13
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8portName,u8 Copy_u8PinNumber)
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <DIO_u8GetPinValue+0x6>
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <DIO_u8GetPinValue+0x8>
    14b8:	0f 92       	push	r0
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	8a 83       	std	Y+2, r24	; 0x02
    14c0:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8PinValue;


	switch(Copy_u8portName)
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3d 83       	std	Y+5, r19	; 0x05
    14ca:	2c 83       	std	Y+4, r18	; 0x04
    14cc:	4c 81       	ldd	r20, Y+4	; 0x04
    14ce:	5d 81       	ldd	r21, Y+5	; 0x05
    14d0:	41 30       	cpi	r20, 0x01	; 1
    14d2:	51 05       	cpc	r21, r1
    14d4:	41 f1       	breq	.+80     	; 0x1526 <DIO_u8GetPinValue+0x76>
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	82 30       	cpi	r24, 0x02	; 2
    14dc:	91 05       	cpc	r25, r1
    14de:	34 f4       	brge	.+12     	; 0x14ec <DIO_u8GetPinValue+0x3c>
    14e0:	2c 81       	ldd	r18, Y+4	; 0x04
    14e2:	3d 81       	ldd	r19, Y+5	; 0x05
    14e4:	21 15       	cp	r18, r1
    14e6:	31 05       	cpc	r19, r1
    14e8:	61 f0       	breq	.+24     	; 0x1502 <DIO_u8GetPinValue+0x52>
    14ea:	52 c0       	rjmp	.+164    	; 0x1590 <DIO_u8GetPinValue+0xe0>
    14ec:	4c 81       	ldd	r20, Y+4	; 0x04
    14ee:	5d 81       	ldd	r21, Y+5	; 0x05
    14f0:	42 30       	cpi	r20, 0x02	; 2
    14f2:	51 05       	cpc	r21, r1
    14f4:	51 f1       	breq	.+84     	; 0x154a <DIO_u8GetPinValue+0x9a>
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	9d 81       	ldd	r25, Y+5	; 0x05
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	91 05       	cpc	r25, r1
    14fe:	b9 f1       	breq	.+110    	; 0x156e <DIO_u8GetPinValue+0xbe>
    1500:	47 c0       	rjmp	.+142    	; 0x1590 <DIO_u8GetPinValue+0xe0>
		{
			case DIO_PORTA:
				Local_u8PinValue=GET_BIT(PINA, Copy_u8PinNumber);
    1502:	e9 e3       	ldi	r30, 0x39	; 57
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	a9 01       	movw	r20, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_u8GetPinValue+0x6a>
    1516:	55 95       	asr	r21
    1518:	47 95       	ror	r20
    151a:	8a 95       	dec	r24
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO_u8GetPinValue+0x66>
    151e:	ca 01       	movw	r24, r20
    1520:	81 70       	andi	r24, 0x01	; 1
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	35 c0       	rjmp	.+106    	; 0x1590 <DIO_u8GetPinValue+0xe0>

				break;
			case DIO_PORTB:
							Local_u8PinValue=GET_BIT(PINB, Copy_u8PinNumber);
    1526:	e6 e3       	ldi	r30, 0x36	; 54
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	a9 01       	movw	r20, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_u8GetPinValue+0x8e>
    153a:	55 95       	asr	r21
    153c:	47 95       	ror	r20
    153e:	8a 95       	dec	r24
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_u8GetPinValue+0x8a>
    1542:	ca 01       	movw	r24, r20
    1544:	81 70       	andi	r24, 0x01	; 1
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	23 c0       	rjmp	.+70     	; 0x1590 <DIO_u8GetPinValue+0xe0>

							break;
			case DIO_PORTC:
							Local_u8PinValue=GET_BIT(PINC, Copy_u8PinNumber);
    154a:	e3 e3       	ldi	r30, 0x33	; 51
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	88 2f       	mov	r24, r24
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a9 01       	movw	r20, r18
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <DIO_u8GetPinValue+0xb2>
    155e:	55 95       	asr	r21
    1560:	47 95       	ror	r20
    1562:	8a 95       	dec	r24
    1564:	e2 f7       	brpl	.-8      	; 0x155e <DIO_u8GetPinValue+0xae>
    1566:	ca 01       	movw	r24, r20
    1568:	81 70       	andi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	11 c0       	rjmp	.+34     	; 0x1590 <DIO_u8GetPinValue+0xe0>

							break;
			case DIO_PORTD:
							Local_u8PinValue=GET_BIT(PIND, Copy_u8PinNumber);
    156e:	e0 e3       	ldi	r30, 0x30	; 48
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	88 2f       	mov	r24, r24
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a9 01       	movw	r20, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_u8GetPinValue+0xd6>
    1582:	55 95       	asr	r21
    1584:	47 95       	ror	r20
    1586:	8a 95       	dec	r24
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_u8GetPinValue+0xd2>
    158a:	ca 01       	movw	r24, r20
    158c:	81 70       	andi	r24, 0x01	; 1
    158e:	89 83       	std	Y+1, r24	; 0x01
							break;


		}

	return Local_u8PinValue;
    1590:	89 81       	ldd	r24, Y+1	; 0x01

}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <DIO_voidSetSpecificPortDirection>:
void DIO_voidSetSpecificPortDirection(u8 Copy_u8PortName,u8 Copy_PortState)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <DIO_voidSetSpecificPortDirection+0x6>
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <DIO_voidSetSpecificPortDirection+0x8>
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	3c 83       	std	Y+4, r19	; 0x04
    15ba:	2b 83       	std	Y+3, r18	; 0x03
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	81 30       	cpi	r24, 0x01	; 1
    15c2:	91 05       	cpc	r25, r1
    15c4:	d1 f0       	breq	.+52     	; 0x15fa <DIO_voidSetSpecificPortDirection+0x58>
    15c6:	2b 81       	ldd	r18, Y+3	; 0x03
    15c8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ca:	22 30       	cpi	r18, 0x02	; 2
    15cc:	31 05       	cpc	r19, r1
    15ce:	2c f4       	brge	.+10     	; 0x15da <DIO_voidSetSpecificPortDirection+0x38>
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	00 97       	sbiw	r24, 0x00	; 0
    15d6:	61 f0       	breq	.+24     	; 0x15f0 <DIO_voidSetSpecificPortDirection+0x4e>
    15d8:	1e c0       	rjmp	.+60     	; 0x1616 <DIO_voidSetSpecificPortDirection+0x74>
    15da:	2b 81       	ldd	r18, Y+3	; 0x03
    15dc:	3c 81       	ldd	r19, Y+4	; 0x04
    15de:	22 30       	cpi	r18, 0x02	; 2
    15e0:	31 05       	cpc	r19, r1
    15e2:	81 f0       	breq	.+32     	; 0x1604 <DIO_voidSetSpecificPortDirection+0x62>
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	83 30       	cpi	r24, 0x03	; 3
    15ea:	91 05       	cpc	r25, r1
    15ec:	81 f0       	breq	.+32     	; 0x160e <DIO_voidSetSpecificPortDirection+0x6c>
    15ee:	13 c0       	rjmp	.+38     	; 0x1616 <DIO_voidSetSpecificPortDirection+0x74>
	{
	case DIO_PORTA:
		DDRA = Copy_PortState;
    15f0:	ea e3       	ldi	r30, 0x3A	; 58
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	80 83       	st	Z, r24
    15f8:	0e c0       	rjmp	.+28     	; 0x1616 <DIO_voidSetSpecificPortDirection+0x74>
		break;
	case DIO_PORTB:
		DDRB = Copy_PortState;
    15fa:	e7 e3       	ldi	r30, 0x37	; 55
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	80 83       	st	Z, r24
    1602:	09 c0       	rjmp	.+18     	; 0x1616 <DIO_voidSetSpecificPortDirection+0x74>
		break;
	case DIO_PORTC:
		DDRC = Copy_PortState;
    1604:	e4 e3       	ldi	r30, 0x34	; 52
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	80 83       	st	Z, r24
    160c:	04 c0       	rjmp	.+8      	; 0x1616 <DIO_voidSetSpecificPortDirection+0x74>
		break;
	case DIO_PORTD:
		DDRD = Copy_PortState;
    160e:	e1 e3       	ldi	r30, 0x31	; 49
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	80 83       	st	Z, r24
		break;
	}
}
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <DIO_voidSetSpecificPortValue>:

void DIO_voidSetSpecificPortValue(u8 Copy_u8PortName,u8 Copy_PortState)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	00 d0       	rcall	.+0      	; 0x162a <DIO_voidSetSpecificPortValue+0x6>
    162a:	00 d0       	rcall	.+0      	; 0x162c <DIO_voidSetSpecificPortValue+0x8>
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    1634:	89 81       	ldd	r24, Y+1	; 0x01
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	3c 83       	std	Y+4, r19	; 0x04
    163c:	2b 83       	std	Y+3, r18	; 0x03
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	91 05       	cpc	r25, r1
    1646:	d1 f0       	breq	.+52     	; 0x167c <DIO_voidSetSpecificPortValue+0x58>
    1648:	2b 81       	ldd	r18, Y+3	; 0x03
    164a:	3c 81       	ldd	r19, Y+4	; 0x04
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	2c f4       	brge	.+10     	; 0x165c <DIO_voidSetSpecificPortValue+0x38>
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	61 f0       	breq	.+24     	; 0x1672 <DIO_voidSetSpecificPortValue+0x4e>
    165a:	1e c0       	rjmp	.+60     	; 0x1698 <DIO_voidSetSpecificPortValue+0x74>
    165c:	2b 81       	ldd	r18, Y+3	; 0x03
    165e:	3c 81       	ldd	r19, Y+4	; 0x04
    1660:	22 30       	cpi	r18, 0x02	; 2
    1662:	31 05       	cpc	r19, r1
    1664:	81 f0       	breq	.+32     	; 0x1686 <DIO_voidSetSpecificPortValue+0x62>
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	83 30       	cpi	r24, 0x03	; 3
    166c:	91 05       	cpc	r25, r1
    166e:	81 f0       	breq	.+32     	; 0x1690 <DIO_voidSetSpecificPortValue+0x6c>
    1670:	13 c0       	rjmp	.+38     	; 0x1698 <DIO_voidSetSpecificPortValue+0x74>
		{
		case DIO_PORTA:
			PORTA = Copy_PortState;
    1672:	eb e3       	ldi	r30, 0x3B	; 59
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	80 83       	st	Z, r24
    167a:	0e c0       	rjmp	.+28     	; 0x1698 <DIO_voidSetSpecificPortValue+0x74>
			break;
		case DIO_PORTB:
			PORTB = Copy_PortState;
    167c:	e8 e3       	ldi	r30, 0x38	; 56
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	80 83       	st	Z, r24
    1684:	09 c0       	rjmp	.+18     	; 0x1698 <DIO_voidSetSpecificPortValue+0x74>
			break;
		case DIO_PORTC:
			PORTC = Copy_PortState;
    1686:	e5 e3       	ldi	r30, 0x35	; 53
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	80 83       	st	Z, r24
    168e:	04 c0       	rjmp	.+8      	; 0x1698 <DIO_voidSetSpecificPortValue+0x74>
			break;
		case DIO_PORTD:
			PORTD = Copy_PortState;
    1690:	e2 e3       	ldi	r30, 0x32	; 50
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	80 83       	st	Z, r24
			break;
		}
}
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <ADC_voidInit>:
#include "../../LIB/STD_TYPES.h"
#include "ADC_interface.h"


void ADC_voidInit()
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
	//set source voltage -->AVCC
	SET_BIT(ADMUX,6);
    16ae:	a7 e2       	ldi	r26, 0x27	; 39
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e7 e2       	ldi	r30, 0x27	; 39
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	80 64       	ori	r24, 0x40	; 64
    16ba:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    16bc:	a7 e2       	ldi	r26, 0x27	; 39
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e7 e2       	ldi	r30, 0x27	; 39
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8f 77       	andi	r24, 0x7F	; 127
    16c8:	8c 93       	st	X, r24

	//adjust left bit
	SET_BIT(ADMUX,5);
    16ca:	a7 e2       	ldi	r26, 0x27	; 39
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e7 e2       	ldi	r30, 0x27	; 39
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	80 62       	ori	r24, 0x20	; 32
    16d6:	8c 93       	st	X, r24

	//set ADC prescaler -->/64
	CLR_BIT(ADCSRA,0);
    16d8:	a6 e2       	ldi	r26, 0x26	; 38
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e6 e2       	ldi	r30, 0x26	; 38
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8e 7f       	andi	r24, 0xFE	; 254
    16e4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,1);
    16e6:	a6 e2       	ldi	r26, 0x26	; 38
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e6 e2       	ldi	r30, 0x26	; 38
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	82 60       	ori	r24, 0x02	; 2
    16f2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,2);
    16f4:	a6 e2       	ldi	r26, 0x26	; 38
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e6 e2       	ldi	r30, 0x26	; 38
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	84 60       	ori	r24, 0x04	; 4
    1700:	8c 93       	st	X, r24


	//enable ADC
	SET_BIT(ADCSRA,7);
    1702:	a6 e2       	ldi	r26, 0x26	; 38
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e6 e2       	ldi	r30, 0x26	; 38
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	80 68       	ori	r24, 0x80	; 128
    170e:	8c 93       	st	X, r24
}
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <ADC_u8StartConversion>:

u8 ADC_u8StartConversion(u8 Copy_u8ChannelNumber)
{// 	ADC channel select
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	0f 92       	push	r0
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &=0b11100000;
    1722:	a7 e2       	ldi	r26, 0x27	; 39
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e7 e2       	ldi	r30, 0x27	; 39
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	80 7e       	andi	r24, 0xE0	; 224
    172e:	8c 93       	st	X, r24

	ADMUX |=Copy_u8ChannelNumber;
    1730:	a7 e2       	ldi	r26, 0x27	; 39
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e7 e2       	ldi	r30, 0x27	; 39
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	90 81       	ld	r25, Z
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	89 2b       	or	r24, r25
    173e:	8c 93       	st	X, r24

	//ADC start conversion

	SET_BIT(ADCSRA,6);
    1740:	a6 e2       	ldi	r26, 0x26	; 38
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e6 e2       	ldi	r30, 0x26	; 38
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	80 64       	ori	r24, 0x40	; 64
    174c:	8c 93       	st	X, r24


	//wait until conversion complete

	while(GET_BIT(ADCSRA,4)==0);
    174e:	e6 e2       	ldi	r30, 0x26	; 38
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	82 95       	swap	r24
    1756:	8f 70       	andi	r24, 0x0F	; 15
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	81 70       	andi	r24, 0x01	; 1
    175e:	90 70       	andi	r25, 0x00	; 0
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	a9 f3       	breq	.-22     	; 0x174e <ADC_u8StartConversion+0x38>


	// clear flag

	SET_BIT(ADCSRA,4);
    1764:	a6 e2       	ldi	r26, 0x26	; 38
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e6 e2       	ldi	r30, 0x26	; 38
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	80 61       	ori	r24, 0x10	; 16
    1770:	8c 93       	st	X, r24

	return ADCH;
    1772:	e5 e2       	ldi	r30, 0x25	; 37
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z

}
    1778:	0f 90       	pop	r0
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <LCD_voidSendData>:
#include "LCD_interface.h"



void LCD_voidSendData(u8 Copy_u8Data)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	60 97       	sbiw	r28, 0x10	; 16
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	88 8b       	std	Y+16, r24	; 0x10
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN ,HIGH);//Send data
    1796:	83 e0       	ldi	r24, 0x03	; 3
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	41 e0       	ldi	r20, 0x01	; 1
    179c:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
   DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN ,LOW);//Write
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	61 e0       	ldi	r22, 0x01	; 1
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
   for(u8 i=0;i<8;i++)
    17aa:	1f 86       	std	Y+15, r1	; 0x0f
    17ac:	17 c0       	rjmp	.+46     	; 0x17dc <LCD_voidSendData+0x5c>
   {
	   DIO_voidSetPinValue(LCD_DATA_PORT,i,GET_BIT(Copy_u8Data,i));
    17ae:	88 89       	ldd	r24, Y+16	; 0x10
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a9 01       	movw	r20, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <LCD_voidSendData+0x42>
    17be:	55 95       	asr	r21
    17c0:	47 95       	ror	r20
    17c2:	8a 95       	dec	r24
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <LCD_voidSendData+0x3e>
    17c6:	ca 01       	movw	r24, r20
    17c8:	98 2f       	mov	r25, r24
    17ca:	91 70       	andi	r25, 0x01	; 1
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	6f 85       	ldd	r22, Y+15	; 0x0f
    17d0:	49 2f       	mov	r20, r25
    17d2:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>

void LCD_voidSendData(u8 Copy_u8Data)
{
	DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN ,HIGH);//Send data
   DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN ,LOW);//Write
   for(u8 i=0;i<8;i++)
    17d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d8:	8f 5f       	subi	r24, 0xFF	; 255
    17da:	8f 87       	std	Y+15, r24	; 0x0f
    17dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    17de:	88 30       	cpi	r24, 0x08	; 8
    17e0:	30 f3       	brcs	.-52     	; 0x17ae <LCD_voidSendData+0x2e>
   {
	   DIO_voidSetPinValue(LCD_DATA_PORT,i,GET_BIT(Copy_u8Data,i));
   }
  DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    17e2:	83 e0       	ldi	r24, 0x03	; 3
    17e4:	62 e0       	ldi	r22, 0x02	; 2
    17e6:	41 e0       	ldi	r20, 0x01	; 1
    17e8:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	a0 e0       	ldi	r26, 0x00	; 0
    17f2:	b0 e4       	ldi	r27, 0x40	; 64
    17f4:	8b 87       	std	Y+11, r24	; 0x0b
    17f6:	9c 87       	std	Y+12, r25	; 0x0c
    17f8:	ad 87       	std	Y+13, r26	; 0x0d
    17fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1800:	8d 85       	ldd	r24, Y+13	; 0x0d
    1802:	9e 85       	ldd	r25, Y+14	; 0x0e
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	4a ef       	ldi	r20, 0xFA	; 250
    180a:	54 e4       	ldi	r21, 0x44	; 68
    180c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	8f 83       	std	Y+7, r24	; 0x07
    1816:	98 87       	std	Y+8, r25	; 0x08
    1818:	a9 87       	std	Y+9, r26	; 0x09
    181a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    181c:	6f 81       	ldd	r22, Y+7	; 0x07
    181e:	78 85       	ldd	r23, Y+8	; 0x08
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	9a 85       	ldd	r25, Y+10	; 0x0a
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e8       	ldi	r20, 0x80	; 128
    182a:	5f e3       	ldi	r21, 0x3F	; 63
    182c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1830:	88 23       	and	r24, r24
    1832:	2c f4       	brge	.+10     	; 0x183e <LCD_voidSendData+0xbe>
		__ticks = 1;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	9e 83       	std	Y+6, r25	; 0x06
    183a:	8d 83       	std	Y+5, r24	; 0x05
    183c:	3f c0       	rjmp	.+126    	; 0x18bc <LCD_voidSendData+0x13c>
	else if (__tmp > 65535)
    183e:	6f 81       	ldd	r22, Y+7	; 0x07
    1840:	78 85       	ldd	r23, Y+8	; 0x08
    1842:	89 85       	ldd	r24, Y+9	; 0x09
    1844:	9a 85       	ldd	r25, Y+10	; 0x0a
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	3f ef       	ldi	r19, 0xFF	; 255
    184a:	4f e7       	ldi	r20, 0x7F	; 127
    184c:	57 e4       	ldi	r21, 0x47	; 71
    184e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1852:	18 16       	cp	r1, r24
    1854:	4c f5       	brge	.+82     	; 0x18a8 <LCD_voidSendData+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1856:	6b 85       	ldd	r22, Y+11	; 0x0b
    1858:	7c 85       	ldd	r23, Y+12	; 0x0c
    185a:	8d 85       	ldd	r24, Y+13	; 0x0d
    185c:	9e 85       	ldd	r25, Y+14	; 0x0e
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e2       	ldi	r20, 0x20	; 32
    1864:	51 e4       	ldi	r21, 0x41	; 65
    1866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	bc 01       	movw	r22, r24
    1870:	cd 01       	movw	r24, r26
    1872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	9e 83       	std	Y+6, r25	; 0x06
    187c:	8d 83       	std	Y+5, r24	; 0x05
    187e:	0f c0       	rjmp	.+30     	; 0x189e <LCD_voidSendData+0x11e>
    1880:	88 ec       	ldi	r24, 0xC8	; 200
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	9c 83       	std	Y+4, r25	; 0x04
    1886:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	9c 81       	ldd	r25, Y+4	; 0x04
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	f1 f7       	brne	.-4      	; 0x188c <LCD_voidSendData+0x10c>
    1890:	9c 83       	std	Y+4, r25	; 0x04
    1892:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1894:	8d 81       	ldd	r24, Y+5	; 0x05
    1896:	9e 81       	ldd	r25, Y+6	; 0x06
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	69 f7       	brne	.-38     	; 0x1880 <LCD_voidSendData+0x100>
    18a6:	14 c0       	rjmp	.+40     	; 0x18d0 <LCD_voidSendData+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a8:	6f 81       	ldd	r22, Y+7	; 0x07
    18aa:	78 85       	ldd	r23, Y+8	; 0x08
    18ac:	89 85       	ldd	r24, Y+9	; 0x09
    18ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	9e 83       	std	Y+6, r25	; 0x06
    18ba:	8d 83       	std	Y+5, r24	; 0x05
    18bc:	8d 81       	ldd	r24, Y+5	; 0x05
    18be:	9e 81       	ldd	r25, Y+6	; 0x06
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	9a 81       	ldd	r25, Y+2	; 0x02
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	f1 f7       	brne	.-4      	; 0x18c8 <LCD_voidSendData+0x148>
    18cc:	9a 83       	std	Y+2, r25	; 0x02
    18ce:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
  DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    18d0:	83 e0       	ldi	r24, 0x03	; 3
    18d2:	62 e0       	ldi	r22, 0x02	; 2
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>

}
    18da:	60 96       	adiw	r28, 0x10	; 16
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <LCD_voidSendCommand>:


void LCD_voidSendCommand(u8 Copy_u8Command)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	60 97       	sbiw	r28, 0x10	; 16
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	88 8b       	std	Y+16, r24	; 0x10
	 DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN ,LOW);//Send Command
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
	   DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN ,LOW);//Write
    190c:	83 e0       	ldi	r24, 0x03	; 3
    190e:	61 e0       	ldi	r22, 0x01	; 1
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
	   for(u8 i=0;i<8;i++)
    1916:	1f 86       	std	Y+15, r1	; 0x0f
    1918:	17 c0       	rjmp	.+46     	; 0x1948 <LCD_voidSendCommand+0x5c>
	   {
		   DIO_voidSetPinValue(LCD_DATA_PORT,i,GET_BIT(Copy_u8Command,i));
    191a:	88 89       	ldd	r24, Y+16	; 0x10
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	8f 85       	ldd	r24, Y+15	; 0x0f
    1922:	88 2f       	mov	r24, r24
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a9 01       	movw	r20, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <LCD_voidSendCommand+0x42>
    192a:	55 95       	asr	r21
    192c:	47 95       	ror	r20
    192e:	8a 95       	dec	r24
    1930:	e2 f7       	brpl	.-8      	; 0x192a <LCD_voidSendCommand+0x3e>
    1932:	ca 01       	movw	r24, r20
    1934:	98 2f       	mov	r25, r24
    1936:	91 70       	andi	r25, 0x01	; 1
    1938:	82 e0       	ldi	r24, 0x02	; 2
    193a:	6f 85       	ldd	r22, Y+15	; 0x0f
    193c:	49 2f       	mov	r20, r25
    193e:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>

void LCD_voidSendCommand(u8 Copy_u8Command)
{
	 DIO_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN ,LOW);//Send Command
	   DIO_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN ,LOW);//Write
	   for(u8 i=0;i<8;i++)
    1942:	8f 85       	ldd	r24, Y+15	; 0x0f
    1944:	8f 5f       	subi	r24, 0xFF	; 255
    1946:	8f 87       	std	Y+15, r24	; 0x0f
    1948:	8f 85       	ldd	r24, Y+15	; 0x0f
    194a:	88 30       	cpi	r24, 0x08	; 8
    194c:	30 f3       	brcs	.-52     	; 0x191a <LCD_voidSendCommand+0x2e>
	   {
		   DIO_voidSetPinValue(LCD_DATA_PORT,i,GET_BIT(Copy_u8Command,i));
	   }
	  DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    194e:	83 e0       	ldi	r24, 0x03	; 3
    1950:	62 e0       	ldi	r22, 0x02	; 2
    1952:	41 e0       	ldi	r20, 0x01	; 1
    1954:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	a0 e0       	ldi	r26, 0x00	; 0
    195e:	b0 e4       	ldi	r27, 0x40	; 64
    1960:	8b 87       	std	Y+11, r24	; 0x0b
    1962:	9c 87       	std	Y+12, r25	; 0x0c
    1964:	ad 87       	std	Y+13, r26	; 0x0d
    1966:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1968:	6b 85       	ldd	r22, Y+11	; 0x0b
    196a:	7c 85       	ldd	r23, Y+12	; 0x0c
    196c:	8d 85       	ldd	r24, Y+13	; 0x0d
    196e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4a ef       	ldi	r20, 0xFA	; 250
    1976:	54 e4       	ldi	r21, 0x44	; 68
    1978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	8f 83       	std	Y+7, r24	; 0x07
    1982:	98 87       	std	Y+8, r25	; 0x08
    1984:	a9 87       	std	Y+9, r26	; 0x09
    1986:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1988:	6f 81       	ldd	r22, Y+7	; 0x07
    198a:	78 85       	ldd	r23, Y+8	; 0x08
    198c:	89 85       	ldd	r24, Y+9	; 0x09
    198e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    199c:	88 23       	and	r24, r24
    199e:	2c f4       	brge	.+10     	; 0x19aa <LCD_voidSendCommand+0xbe>
		__ticks = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9e 83       	std	Y+6, r25	; 0x06
    19a6:	8d 83       	std	Y+5, r24	; 0x05
    19a8:	3f c0       	rjmp	.+126    	; 0x1a28 <LCD_voidSendCommand+0x13c>
	else if (__tmp > 65535)
    19aa:	6f 81       	ldd	r22, Y+7	; 0x07
    19ac:	78 85       	ldd	r23, Y+8	; 0x08
    19ae:	89 85       	ldd	r24, Y+9	; 0x09
    19b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	3f ef       	ldi	r19, 0xFF	; 255
    19b6:	4f e7       	ldi	r20, 0x7F	; 127
    19b8:	57 e4       	ldi	r21, 0x47	; 71
    19ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19be:	18 16       	cp	r1, r24
    19c0:	4c f5       	brge	.+82     	; 0x1a14 <LCD_voidSendCommand+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e2       	ldi	r20, 0x20	; 32
    19d0:	51 e4       	ldi	r21, 0x41	; 65
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
    19ea:	0f c0       	rjmp	.+30     	; 0x1a0a <LCD_voidSendCommand+0x11e>
    19ec:	88 ec       	ldi	r24, 0xC8	; 200
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	9c 83       	std	Y+4, r25	; 0x04
    19f2:	8b 83       	std	Y+3, r24	; 0x03
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <LCD_voidSendCommand+0x10c>
    19fc:	9c 83       	std	Y+4, r25	; 0x04
    19fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a00:	8d 81       	ldd	r24, Y+5	; 0x05
    1a02:	9e 81       	ldd	r25, Y+6	; 0x06
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	69 f7       	brne	.-38     	; 0x19ec <LCD_voidSendCommand+0x100>
    1a12:	14 c0       	rjmp	.+40     	; 0x1a3c <LCD_voidSendCommand+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a14:	6f 81       	ldd	r22, Y+7	; 0x07
    1a16:	78 85       	ldd	r23, Y+8	; 0x08
    1a18:	89 85       	ldd	r24, Y+9	; 0x09
    1a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	9a 83       	std	Y+2, r25	; 0x02
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	9a 81       	ldd	r25, Y+2	; 0x02
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_voidSendCommand+0x148>
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(2);
	  DIO_voidSetPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    1a3c:	83 e0       	ldi	r24, 0x03	; 3
    1a3e:	62 e0       	ldi	r22, 0x02	; 2
    1a40:	40 e0       	ldi	r20, 0x00	; 0
    1a42:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>

}
    1a46:	60 96       	adiw	r28, 0x10	; 16
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <LCD_voidInit>:

void LCD_voidInit(void)
{
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	2f 97       	sbiw	r28, 0x0f	; 15
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61
	for(u8 i=0;i<8;i++)
    1a6c:	1f 86       	std	Y+15, r1	; 0x0f
    1a6e:	08 c0       	rjmp	.+16     	; 0x1a80 <LCD_voidInit+0x28>
	{
		DIO_voidSetPinDirection(LCD_DATA_PORT,i,OUTPUT);
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a74:	41 e0       	ldi	r20, 0x01	; 1
    1a76:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_voidSetPinDirection>

}

void LCD_voidInit(void)
{
	for(u8 i=0;i<8;i++)
    1a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7c:	8f 5f       	subi	r24, 0xFF	; 255
    1a7e:	8f 87       	std	Y+15, r24	; 0x0f
    1a80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a82:	88 30       	cpi	r24, 0x08	; 8
    1a84:	a8 f3       	brcs	.-22     	; 0x1a70 <LCD_voidInit+0x18>
	{
		DIO_voidSetPinDirection(LCD_DATA_PORT,i,OUTPUT);
	}

	DIO_voidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,OUTPUT);
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,OUTPUT);
    1a90:	83 e0       	ldi	r24, 0x03	; 3
    1a92:	61 e0       	ldi	r22, 0x01	; 1
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_EN_PORT,LCD_EN_PIN,OUTPUT);
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
    1a9c:	62 e0       	ldi	r22, 0x02	; 2
    1a9e:	41 e0       	ldi	r20, 0x01	; 1
    1aa0:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_voidSetPinDirection>
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 e2       	ldi	r26, 0x20	; 32
    1aaa:	b2 e4       	ldi	r27, 0x42	; 66
    1aac:	8b 87       	std	Y+11, r24	; 0x0b
    1aae:	9c 87       	std	Y+12, r25	; 0x0c
    1ab0:	ad 87       	std	Y+13, r26	; 0x0d
    1ab2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4a ef       	ldi	r20, 0xFA	; 250
    1ac2:	54 e4       	ldi	r21, 0x44	; 68
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	8f 83       	std	Y+7, r24	; 0x07
    1ace:	98 87       	std	Y+8, r25	; 0x08
    1ad0:	a9 87       	std	Y+9, r26	; 0x09
    1ad2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad6:	78 85       	ldd	r23, Y+8	; 0x08
    1ad8:	89 85       	ldd	r24, Y+9	; 0x09
    1ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e8       	ldi	r20, 0x80	; 128
    1ae2:	5f e3       	ldi	r21, 0x3F	; 63
    1ae4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae8:	88 23       	and	r24, r24
    1aea:	2c f4       	brge	.+10     	; 0x1af6 <LCD_voidInit+0x9e>
		__ticks = 1;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9e 83       	std	Y+6, r25	; 0x06
    1af2:	8d 83       	std	Y+5, r24	; 0x05
    1af4:	3f c0       	rjmp	.+126    	; 0x1b74 <LCD_voidInit+0x11c>
	else if (__tmp > 65535)
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	3f ef       	ldi	r19, 0xFF	; 255
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	57 e4       	ldi	r21, 0x47	; 71
    1b06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	4c f5       	brge	.+82     	; 0x1b60 <LCD_voidInit+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <LCD_voidInit+0xfe>
    1b38:	88 ec       	ldi	r24, 0xC8	; 200
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9c 83       	std	Y+4, r25	; 0x04
    1b3e:	8b 83       	std	Y+3, r24	; 0x03
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_voidInit+0xec>
    1b48:	9c 83       	std	Y+4, r25	; 0x04
    1b4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b56:	8d 81       	ldd	r24, Y+5	; 0x05
    1b58:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	69 f7       	brne	.-38     	; 0x1b38 <LCD_voidInit+0xe0>
    1b5e:	14 c0       	rjmp	.+40     	; 0x1b88 <LCD_voidInit+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	6f 81       	ldd	r22, Y+7	; 0x07
    1b62:	78 85       	ldd	r23, Y+8	; 0x08
    1b64:	89 85       	ldd	r24, Y+9	; 0x09
    1b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	9a 83       	std	Y+2, r25	; 0x02
    1b7a:	89 83       	std	Y+1, r24	; 0x01
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <LCD_voidInit+0x128>
    1b84:	9a 83       	std	Y+2, r25	; 0x02
    1b86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
   LCD_voidSendCommand(0b00111000);
    1b88:	88 e3       	ldi	r24, 0x38	; 56
    1b8a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_voidSendCommand>
   LCD_voidSendCommand(0b00001100);
    1b8e:	8c e0       	ldi	r24, 0x0C	; 12
    1b90:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_voidSendCommand>
   LCD_voidSendCommand(0b00000001);
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_voidSendCommand>
}
    1b9a:	2f 96       	adiw	r28, 0x0f	; 15
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <LCD_voidClearDisplay>:

void LCD_voidClearDisplay(void)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
	 LCD_voidSendCommand(0b00000001);
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_voidSendCommand>
}
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <LCD_GotoXY>:
 * at x=0   address=y position
 * at x=1    address=y+0x40
 */

void LCD_GotoXY(u8 Copy_u8X,u8 Copy_u8Y)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <LCD_GotoXY+0x6>
    1bc6:	0f 92       	push	r0
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	8a 83       	std	Y+2, r24	; 0x02
    1bce:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8Address=0;
    1bd0:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_u8X==0)
    1bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd4:	88 23       	and	r24, r24
    1bd6:	19 f4       	brne	.+6      	; 0x1bde <LCD_GotoXY+0x1e>
	{
		Local_u8Address= Copy_u8Y;
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	03 c0       	rjmp	.+6      	; 0x1be4 <LCD_GotoXY+0x24>
	}
	else
	{
		Local_u8Address= Copy_u8Y+0x40;
    1bde:	8b 81       	ldd	r24, Y+3	; 0x03
    1be0:	80 5c       	subi	r24, 0xC0	; 192
    1be2:	89 83       	std	Y+1, r24	; 0x01
	}

	SET_BIT(Local_u8Address,7);
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	80 68       	ori	r24, 0x80	; 128
    1be8:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_u8Address);
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LCD_voidSendCommand>

}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret

00001bfc <LCD_voidSendString>:
void LCD_voidSendString(u8* Copy_pcString)
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <LCD_voidSendString+0x6>
    1c02:	0f 92       	push	r0
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	9b 83       	std	Y+3, r25	; 0x03
    1c0a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Index=0;
    1c0c:	19 82       	std	Y+1, r1	; 0x01
    1c0e:	0e c0       	rjmp	.+28     	; 0x1c2c <LCD_voidSendString+0x30>

	while(Copy_pcString[Local_u8Index]!='\0')
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	9b 81       	ldd	r25, Y+3	; 0x03
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	e2 0f       	add	r30, r18
    1c1e:	f3 1f       	adc	r31, r19
    1c20:	80 81       	ld	r24, Z
    1c22:	0e 94 c0 0b 	call	0x1780	; 0x1780 <LCD_voidSendData>
		Local_u8Index++;
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	8f 5f       	subi	r24, 0xFF	; 255
    1c2a:	89 83       	std	Y+1, r24	; 0x01
}
void LCD_voidSendString(u8* Copy_pcString)
{
	u8 Local_u8Index=0;

	while(Copy_pcString[Local_u8Index]!='\0')
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	9b 81       	ldd	r25, Y+3	; 0x03
    1c36:	fc 01       	movw	r30, r24
    1c38:	e2 0f       	add	r30, r18
    1c3a:	f3 1f       	adc	r31, r19
    1c3c:	80 81       	ld	r24, Z
    1c3e:	88 23       	and	r24, r24
    1c40:	39 f7       	brne	.-50     	; 0x1c10 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_pcString[Local_u8Index]);
		Local_u8Index++;
	}
}
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 Copy_u32Number)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	2c 97       	sbiw	r28, 0x0c	; 12
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	9c 87       	std	Y+12, r25	; 0x0c
    1c64:	8b 87       	std	Y+11, r24	; 0x0b
   u8 Local_u8Str[10];
   itoa(Copy_u32Number, Local_u8Str,10);
    1c66:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c68:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c6a:	9e 01       	movw	r18, r28
    1c6c:	2f 5f       	subi	r18, 0xFF	; 255
    1c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c70:	b9 01       	movw	r22, r18
    1c72:	4a e0       	ldi	r20, 0x0A	; 10
    1c74:	50 e0       	ldi	r21, 0x00	; 0
    1c76:	0e 94 ce 10 	call	0x219c	; 0x219c <itoa>
   LCD_voidSendString(Local_u8Str);
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	01 96       	adiw	r24, 0x01	; 1
    1c7e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LCD_voidSendString>

}
    1c82:	2c 96       	adiw	r28, 0x0c	; 12
    1c84:	0f b6       	in	r0, 0x3f	; 63
    1c86:	f8 94       	cli
    1c88:	de bf       	out	0x3e, r29	; 62
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	cd bf       	out	0x3d, r28	; 61
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <KPD_voidInit>:

#include "KPD_interface.h"


void KPD_voidInit(void)
{
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL0_PIN, OUTPUT);
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL1_PIN, OUTPUT);
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	61 e0       	ldi	r22, 0x01	; 1
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL2_PIN, OUTPUT);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	62 e0       	ldi	r22, 0x02	; 2
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_COL_PORT,KPD_COL3_PIN, OUTPUT);
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	63 e0       	ldi	r22, 0x03	; 3
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL0_PIN, HIGH);
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL1_PIN, HIGH);
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	61 e0       	ldi	r22, 0x01	; 1
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL2_PIN, HIGH);
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	62 e0       	ldi	r22, 0x02	; 2
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_COL_PORT,KPD_COL3_PIN, HIGH);
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	63 e0       	ldi	r22, 0x03	; 3
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>



	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW0_PIN, INPUT);
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	64 e0       	ldi	r22, 0x04	; 4
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW1_PIN, INPUT);
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	65 e0       	ldi	r22, 0x05	; 5
    1cfa:	40 e0       	ldi	r20, 0x00	; 0
    1cfc:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW2_PIN, INPUT);
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	66 e0       	ldi	r22, 0x06	; 6
    1d04:	40 e0       	ldi	r20, 0x00	; 0
    1d06:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KPD_ROW_PORT,KPD_ROW3_PIN, INPUT);
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	67 e0       	ldi	r22, 0x07	; 7
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(KPD_ROW_PORT, KPD_ROW0_PIN, HIGH);
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	64 e0       	ldi	r22, 0x04	; 4
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT, KPD_ROW1_PIN, HIGH);
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	65 e0       	ldi	r22, 0x05	; 5
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT, KPD_ROW2_PIN, HIGH);
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	66 e0       	ldi	r22, 0x06	; 6
    1d2c:	41 e0       	ldi	r20, 0x01	; 1
    1d2e:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KPD_ROW_PORT, KPD_ROW3_PIN, HIGH);
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	67 e0       	ldi	r22, 0x07	; 7
    1d36:	41 e0       	ldi	r20, 0x01	; 1
    1d38:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>

}
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <KPD_u8GetPressedKey>:
u8 KPD_u8GetPressedKey(void)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	a2 97       	sbiw	r28, 0x22	; 34
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61

	u8 Local_u8PressedKey=0xAA;
    1d56:	8a ea       	ldi	r24, 0xAA	; 170
    1d58:	8c 83       	std	Y+4, r24	; 0x04

	u8 Local_u8ColumsArray[4]={KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN,KPD_COL3_PIN};
    1d5a:	1d 82       	std	Y+5, r1	; 0x05
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	8e 83       	std	Y+6, r24	; 0x06
    1d60:	82 e0       	ldi	r24, 0x02	; 2
    1d62:	8f 83       	std	Y+7, r24	; 0x07
    1d64:	83 e0       	ldi	r24, 0x03	; 3
    1d66:	88 87       	std	Y+8, r24	; 0x08
	u8 Local_u8RowsArray[4]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};
    1d68:	84 e0       	ldi	r24, 0x04	; 4
    1d6a:	89 87       	std	Y+9, r24	; 0x09
    1d6c:	85 e0       	ldi	r24, 0x05	; 5
    1d6e:	8a 87       	std	Y+10, r24	; 0x0a
    1d70:	86 e0       	ldi	r24, 0x06	; 6
    1d72:	8b 87       	std	Y+11, r24	; 0x0b
    1d74:	87 e0       	ldi	r24, 0x07	; 7
    1d76:	8c 87       	std	Y+12, r24	; 0x0c

	u8 Local_u8KeyArray[4][4]={ {'7', '8', '9', '/'},
            {'4', '5', '6', '*'},
            {'1', '2', '3', '-'},
            {'C', '0', '=', '+'} };
    1d78:	ce 01       	movw	r24, r28
    1d7a:	0d 96       	adiw	r24, 0x0d	; 13
    1d7c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d7e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d80:	ed e7       	ldi	r30, 0x7D	; 125
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	f9 a3       	std	Y+33, r31	; 0x21
    1d86:	e8 a3       	std	Y+32, r30	; 0x20
    1d88:	f0 e1       	ldi	r31, 0x10	; 16
    1d8a:	fa a3       	std	Y+34, r31	; 0x22
    1d8c:	e8 a1       	ldd	r30, Y+32	; 0x20
    1d8e:	f9 a1       	ldd	r31, Y+33	; 0x21
    1d90:	00 80       	ld	r0, Z
    1d92:	88 a1       	ldd	r24, Y+32	; 0x20
    1d94:	99 a1       	ldd	r25, Y+33	; 0x21
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	99 a3       	std	Y+33, r25	; 0x21
    1d9a:	88 a3       	std	Y+32, r24	; 0x20
    1d9c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1d9e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1da0:	00 82       	st	Z, r0
    1da2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1da4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1da6:	01 96       	adiw	r24, 0x01	; 1
    1da8:	9f 8f       	std	Y+31, r25	; 0x1f
    1daa:	8e 8f       	std	Y+30, r24	; 0x1e
    1dac:	9a a1       	ldd	r25, Y+34	; 0x22
    1dae:	91 50       	subi	r25, 0x01	; 1
    1db0:	9a a3       	std	Y+34, r25	; 0x22
    1db2:	ea a1       	ldd	r30, Y+34	; 0x22
    1db4:	ee 23       	and	r30, r30
    1db6:	51 f7       	brne	.-44     	; 0x1d8c <KPD_u8GetPressedKey+0x4a>

	for(u8 Local_u8ColumnsIndex=0;Local_u8ColumnsIndex<4;Local_u8ColumnsIndex++)
    1db8:	1b 82       	std	Y+3, r1	; 0x03
    1dba:	62 c0       	rjmp	.+196    	; 0x1e80 <KPD_u8GetPressedKey+0x13e>
	{
		DIO_voidSetPinValue(KPD_COL_PORT, Local_u8ColumsArray[Local_u8ColumnsIndex],LOW);
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	ce 01       	movw	r24, r28
    1dc4:	05 96       	adiw	r24, 0x05	; 5
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e2 0f       	add	r30, r18
    1dca:	f3 1f       	adc	r31, r19
    1dcc:	90 81       	ld	r25, Z
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	69 2f       	mov	r22, r25
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
		for(u8 Local_u8RowsIndex=0;Local_u8RowsIndex<4;Local_u8RowsIndex++)
    1dd8:	1a 82       	std	Y+2, r1	; 0x02
    1dda:	3d c0       	rjmp	.+122    	; 0x1e56 <KPD_u8GetPressedKey+0x114>
		{
			u8 Local_u8PinState=DIO_u8GetPinValue(KPD_ROW_PORT, Local_u8RowsArray[Local_u8RowsIndex]);
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	ce 01       	movw	r24, r28
    1de4:	09 96       	adiw	r24, 0x09	; 9
    1de6:	fc 01       	movw	r30, r24
    1de8:	e2 0f       	add	r30, r18
    1dea:	f3 1f       	adc	r31, r19
    1dec:	90 81       	ld	r25, Z
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	69 2f       	mov	r22, r25
    1df2:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <DIO_u8GetPinValue>
    1df6:	89 83       	std	Y+1, r24	; 0x01

			if(Local_u8PinState==0)
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	88 23       	and	r24, r24
    1dfc:	49 f5       	brne	.+82     	; 0x1e50 <KPD_u8GetPressedKey+0x10e>
			{
				Local_u8PressedKey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	48 2f       	mov	r20, r24
    1e08:	50 e0       	ldi	r21, 0x00	; 0
    1e0a:	22 0f       	add	r18, r18
    1e0c:	33 1f       	adc	r19, r19
    1e0e:	22 0f       	add	r18, r18
    1e10:	33 1f       	adc	r19, r19
    1e12:	ce 01       	movw	r24, r28
    1e14:	01 96       	adiw	r24, 0x01	; 1
    1e16:	82 0f       	add	r24, r18
    1e18:	93 1f       	adc	r25, r19
    1e1a:	84 0f       	add	r24, r20
    1e1c:	95 1f       	adc	r25, r21
    1e1e:	fc 01       	movw	r30, r24
    1e20:	3c 96       	adiw	r30, 0x0c	; 12
    1e22:	80 81       	ld	r24, Z
    1e24:	8c 83       	std	Y+4, r24	; 0x04
    1e26:	0e c0       	rjmp	.+28     	; 0x1e44 <KPD_u8GetPressedKey+0x102>
				while(Local_u8PinState==0)
				{
					Local_u8PinState=DIO_u8GetPinValue(KPD_ROW_PORT, Local_u8RowsArray[Local_u8RowsIndex]);
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	ce 01       	movw	r24, r28
    1e30:	09 96       	adiw	r24, 0x09	; 9
    1e32:	fc 01       	movw	r30, r24
    1e34:	e2 0f       	add	r30, r18
    1e36:	f3 1f       	adc	r31, r19
    1e38:	90 81       	ld	r25, Z
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	69 2f       	mov	r22, r25
    1e3e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <DIO_u8GetPinValue>
    1e42:	89 83       	std	Y+1, r24	; 0x01
			u8 Local_u8PinState=DIO_u8GetPinValue(KPD_ROW_PORT, Local_u8RowsArray[Local_u8RowsIndex]);

			if(Local_u8PinState==0)
			{
				Local_u8PressedKey=Local_u8KeyArray[Local_u8RowsIndex][Local_u8ColumnsIndex];
				while(Local_u8PinState==0)
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	88 23       	and	r24, r24
    1e48:	79 f3       	breq	.-34     	; 0x1e28 <KPD_u8GetPressedKey+0xe6>
				{
					Local_u8PinState=DIO_u8GetPinValue(KPD_ROW_PORT, Local_u8RowsArray[Local_u8RowsIndex]);
				}
				return Local_u8PressedKey;
    1e4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1e4c:	fd 8f       	std	Y+29, r31	; 0x1d
    1e4e:	1e c0       	rjmp	.+60     	; 0x1e8c <KPD_u8GetPressedKey+0x14a>
            {'C', '0', '=', '+'} };

	for(u8 Local_u8ColumnsIndex=0;Local_u8ColumnsIndex<4;Local_u8ColumnsIndex++)
	{
		DIO_voidSetPinValue(KPD_COL_PORT, Local_u8ColumsArray[Local_u8ColumnsIndex],LOW);
		for(u8 Local_u8RowsIndex=0;Local_u8RowsIndex<4;Local_u8RowsIndex++)
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	8f 5f       	subi	r24, 0xFF	; 255
    1e54:	8a 83       	std	Y+2, r24	; 0x02
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	84 30       	cpi	r24, 0x04	; 4
    1e5a:	08 f4       	brcc	.+2      	; 0x1e5e <KPD_u8GetPressedKey+0x11c>
    1e5c:	bf cf       	rjmp	.-130    	; 0x1ddc <KPD_u8GetPressedKey+0x9a>
				return Local_u8PressedKey;
			}


		}
		DIO_voidSetPinValue(KPD_COL_PORT, Local_u8ColumsArray[Local_u8ColumnsIndex],HIGH);
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	ce 01       	movw	r24, r28
    1e66:	05 96       	adiw	r24, 0x05	; 5
    1e68:	fc 01       	movw	r30, r24
    1e6a:	e2 0f       	add	r30, r18
    1e6c:	f3 1f       	adc	r31, r19
    1e6e:	90 81       	ld	r25, Z
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	69 2f       	mov	r22, r25
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 42 09 	call	0x1284	; 0x1284 <DIO_voidSetPinValue>
	u8 Local_u8KeyArray[4][4]={ {'7', '8', '9', '/'},
            {'4', '5', '6', '*'},
            {'1', '2', '3', '-'},
            {'C', '0', '=', '+'} };

	for(u8 Local_u8ColumnsIndex=0;Local_u8ColumnsIndex<4;Local_u8ColumnsIndex++)
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	8f 5f       	subi	r24, 0xFF	; 255
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	84 30       	cpi	r24, 0x04	; 4
    1e84:	08 f4       	brcc	.+2      	; 0x1e88 <KPD_u8GetPressedKey+0x146>
    1e86:	9a cf       	rjmp	.-204    	; 0x1dbc <KPD_u8GetPressedKey+0x7a>
		}
		DIO_voidSetPinValue(KPD_COL_PORT, Local_u8ColumsArray[Local_u8ColumnsIndex],HIGH);

	}

	return Local_u8PressedKey;
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e8c:	8d 8d       	ldd	r24, Y+29	; 0x1d

}
    1e8e:	a2 96       	adiw	r28, 0x22	; 34
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <main>:
#include "../HAL/LCD/LCD_interface.h"



int main(void)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	6b 97       	sbiw	r28, 0x1b	; 27
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    // Initialize components (keypad, LCD, and servo motor)
	KPD_voidInit();
    1eb4:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <KPD_voidInit>
    LCD_voidInit();
    1eb8:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <LCD_voidInit>
    DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,OUTPUT);
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	65 e0       	ldi	r22, 0x05	; 5
    1ec0:	41 e0       	ldi	r20, 0x01	; 1
    1ec2:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_voidSetPinDirection>


    while (1)
    {

        LCD_voidClearDisplay();
    1ec6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_voidClearDisplay>
        LCD_voidSendString("Enter Angle:");
    1eca:	80 e6       	ldi	r24, 0x60	; 96
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LCD_voidSendString>

        // Read user input from keypad
        s8 inputBuffer[4];
        u32 inputIndex = 0;
    1ed2:	1f 8a       	std	Y+23, r1	; 0x17
    1ed4:	1e 8a       	std	Y+22, r1	; 0x16

        while (1)
        {
            u8 key = KPD_u8GetPressedKey();
    1ed6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <KPD_u8GetPressedKey>
    1eda:	89 8b       	std	Y+17, r24	; 0x11
            if (key != 0xAA )
    1edc:	89 89       	ldd	r24, Y+17	; 0x11
    1ede:	8a 3a       	cpi	r24, 0xAA	; 170
    1ee0:	d1 f3       	breq	.-12     	; 0x1ed6 <main+0x36>
            {
                if (key == '=')
    1ee2:	89 89       	ldd	r24, Y+17	; 0x11
    1ee4:	8d 33       	cpi	r24, 0x3D	; 61
    1ee6:	39 f5       	brne	.+78     	; 0x1f36 <main+0x96>
                {
                    inputBuffer[inputIndex] = '\0';
    1ee8:	2e 89       	ldd	r18, Y+22	; 0x16
    1eea:	3f 89       	ldd	r19, Y+23	; 0x17
    1eec:	ce 01       	movw	r24, r28
    1eee:	48 96       	adiw	r24, 0x18	; 24
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	e2 0f       	add	r30, r18
    1ef4:	f3 1f       	adc	r31, r19
    1ef6:	10 82       	st	Z, r1


                    u32 desiredAngle = atoi(inputBuffer);
    1ef8:	ce 01       	movw	r24, r28
    1efa:	48 96       	adiw	r24, 0x18	; 24
    1efc:	0e 94 b0 10 	call	0x2160	; 0x2160 <atoi>
    1f00:	98 8b       	std	Y+16, r25	; 0x10
    1f02:	8f 87       	std	Y+15, r24	; 0x0f


                           if (desiredAngle > 180)
    1f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f06:	98 89       	ldd	r25, Y+16	; 0x10
    1f08:	85 3b       	cpi	r24, 0xB5	; 181
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	20 f0       	brcs	.+8      	; 0x1f16 <main+0x76>
                           {
                               desiredAngle = 180;
    1f0e:	84 eb       	ldi	r24, 0xB4	; 180
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	98 8b       	std	Y+16, r25	; 0x10
    1f14:	8f 87       	std	Y+15, r24	; 0x0f
                }
            }
        }

        // Convert input to integer angle
        u32 desiredAngle = atoi(inputBuffer); // Convert string to integer
    1f16:	ce 01       	movw	r24, r28
    1f18:	48 96       	adiw	r24, 0x18	; 24
    1f1a:	0e 94 b0 10 	call	0x2160	; 0x2160 <atoi>
    1f1e:	9d 8b       	std	Y+21, r25	; 0x15
    1f20:	8c 8b       	std	Y+20, r24	; 0x14
        u32 printedAngle=desiredAngle;
    1f22:	8c 89       	ldd	r24, Y+20	; 0x14
    1f24:	9d 89       	ldd	r25, Y+21	; 0x15
    1f26:	9b 8b       	std	Y+19, r25	; 0x13
    1f28:	8a 8b       	std	Y+18, r24	; 0x12


        if (desiredAngle > 180)
    1f2a:	8c 89       	ldd	r24, Y+20	; 0x14
    1f2c:	9d 89       	ldd	r25, Y+21	; 0x15
    1f2e:	85 3b       	cpi	r24, 0xB5	; 181
    1f30:	91 05       	cpc	r25, r1
    1f32:	f8 f4       	brcc	.+62     	; 0x1f72 <main+0xd2>
    1f34:	23 c0       	rjmp	.+70     	; 0x1f7c <main+0xdc>
                    break;
                }
                else
                {

                    inputBuffer[inputIndex] = key;// Append p
    1f36:	2e 89       	ldd	r18, Y+22	; 0x16
    1f38:	3f 89       	ldd	r19, Y+23	; 0x17
    1f3a:	49 89       	ldd	r20, Y+17	; 0x11
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	48 96       	adiw	r24, 0x18	; 24
    1f40:	fc 01       	movw	r30, r24
    1f42:	e2 0f       	add	r30, r18
    1f44:	f3 1f       	adc	r31, r19
    1f46:	40 83       	st	Z, r20
                    inputIndex++;
    1f48:	8e 89       	ldd	r24, Y+22	; 0x16
    1f4a:	9f 89       	ldd	r25, Y+23	; 0x17
    1f4c:	01 96       	adiw	r24, 0x01	; 1
    1f4e:	9f 8b       	std	Y+23, r25	; 0x17
    1f50:	8e 8b       	std	Y+22, r24	; 0x16
                    if (inputIndex >= 3)
    1f52:	8e 89       	ldd	r24, Y+22	; 0x16
    1f54:	9f 89       	ldd	r25, Y+23	; 0x17
    1f56:	83 30       	cpi	r24, 0x03	; 3
    1f58:	91 05       	cpc	r25, r1
    1f5a:	20 f0       	brcs	.+8      	; 0x1f64 <main+0xc4>
                    {
                        inputIndex = 3; // Prevent buffer overflow
    1f5c:	83 e0       	ldi	r24, 0x03	; 3
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9f 8b       	std	Y+23, r25	; 0x17
    1f62:	8e 8b       	std	Y+22, r24	; 0x16
                    }


                    LCD_voidClearDisplay();
    1f64:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_voidClearDisplay>
                    LCD_voidSendString(inputBuffer);
    1f68:	ce 01       	movw	r24, r28
    1f6a:	48 96       	adiw	r24, 0x18	; 24
    1f6c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LCD_voidSendString>
    1f70:	b2 cf       	rjmp	.-156    	; 0x1ed6 <main+0x36>
        u32 printedAngle=desiredAngle;


        if (desiredAngle > 180)
        {
            desiredAngle = 180;
    1f72:	84 eb       	ldi	r24, 0xB4	; 180
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	9d 8b       	std	Y+21, r25	; 0x15
    1f78:	8c 8b       	std	Y+20, r24	; 0x14
    1f7a:	12 c0       	rjmp	.+36     	; 0x1fa0 <main+0x100>

        }
        else if (desiredAngle > 90)
    1f7c:	8c 89       	ldd	r24, Y+20	; 0x14
    1f7e:	9d 89       	ldd	r25, Y+21	; 0x15
    1f80:	8b 35       	cpi	r24, 0x5B	; 91
    1f82:	91 05       	cpc	r25, r1
    1f84:	38 f0       	brcs	.+14     	; 0x1f94 <main+0xf4>
        {

            desiredAngle -=90;
    1f86:	8c 89       	ldd	r24, Y+20	; 0x14
    1f88:	9d 89       	ldd	r25, Y+21	; 0x15
    1f8a:	8a 55       	subi	r24, 0x5A	; 90
    1f8c:	90 40       	sbci	r25, 0x00	; 0
    1f8e:	9d 8b       	std	Y+21, r25	; 0x15
    1f90:	8c 8b       	std	Y+20, r24	; 0x14
    1f92:	06 c0       	rjmp	.+12     	; 0x1fa0 <main+0x100>
        }
        else{
        desiredAngle +=90;
    1f94:	8c 89       	ldd	r24, Y+20	; 0x14
    1f96:	9d 89       	ldd	r25, Y+21	; 0x15
    1f98:	86 5a       	subi	r24, 0xA6	; 166
    1f9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9c:	9d 8b       	std	Y+21, r25	; 0x15
    1f9e:	8c 8b       	std	Y+20, r24	; 0x14

        }
        TIMER1_voidFastPWM();
    1fa0:	0e 94 a1 07 	call	0xf42	; 0xf42 <TIMER1_voidFastPWM>
        SERVO_voidSetAngle(desiredAngle);
    1fa4:	8c 89       	ldd	r24, Y+20	; 0x14
    1fa6:	0e 94 ed 07 	call	0xfda	; 0xfda <SERVO_voidSetAngle>
        // Display actual angle on LCD
        LCD_voidClearDisplay();
    1faa:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <LCD_voidClearDisplay>
        LCD_voidSendString("Angle: ");
    1fae:	8d e6       	ldi	r24, 0x6D	; 109
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LCD_voidSendString>
        LCD_voidSendNumber(printedAngle);
    1fb6:	8a 89       	ldd	r24, Y+18	; 0x12
    1fb8:	9b 89       	ldd	r25, Y+19	; 0x13
    1fba:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_voidSendNumber>
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
    1fc0:	90 e8       	ldi	r25, 0x80	; 128
    1fc2:	ab eb       	ldi	r26, 0xBB	; 187
    1fc4:	b4 e4       	ldi	r27, 0x44	; 68
    1fc6:	8b 87       	std	Y+11, r24	; 0x0b
    1fc8:	9c 87       	std	Y+12, r25	; 0x0c
    1fca:	ad 87       	std	Y+13, r26	; 0x0d
    1fcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	4a ef       	ldi	r20, 0xFA	; 250
    1fdc:	54 e4       	ldi	r21, 0x44	; 68
    1fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	8f 83       	std	Y+7, r24	; 0x07
    1fe8:	98 87       	std	Y+8, r25	; 0x08
    1fea:	a9 87       	std	Y+9, r26	; 0x09
    1fec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff0:	78 85       	ldd	r23, Y+8	; 0x08
    1ff2:	89 85       	ldd	r24, Y+9	; 0x09
    1ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e8       	ldi	r20, 0x80	; 128
    1ffc:	5f e3       	ldi	r21, 0x3F	; 63
    1ffe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2002:	88 23       	and	r24, r24
    2004:	2c f4       	brge	.+10     	; 0x2010 <main+0x170>
		__ticks = 1;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
    200e:	3f c0       	rjmp	.+126    	; 0x208e <main+0x1ee>
	else if (__tmp > 65535)
    2010:	6f 81       	ldd	r22, Y+7	; 0x07
    2012:	78 85       	ldd	r23, Y+8	; 0x08
    2014:	89 85       	ldd	r24, Y+9	; 0x09
    2016:	9a 85       	ldd	r25, Y+10	; 0x0a
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	3f ef       	ldi	r19, 0xFF	; 255
    201c:	4f e7       	ldi	r20, 0x7F	; 127
    201e:	57 e4       	ldi	r21, 0x47	; 71
    2020:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2024:	18 16       	cp	r1, r24
    2026:	4c f5       	brge	.+82     	; 0x207a <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2028:	6b 85       	ldd	r22, Y+11	; 0x0b
    202a:	7c 85       	ldd	r23, Y+12	; 0x0c
    202c:	8d 85       	ldd	r24, Y+13	; 0x0d
    202e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e2       	ldi	r20, 0x20	; 32
    2036:	51 e4       	ldi	r21, 0x41	; 65
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	9e 83       	std	Y+6, r25	; 0x06
    204e:	8d 83       	std	Y+5, r24	; 0x05
    2050:	0f c0       	rjmp	.+30     	; 0x2070 <main+0x1d0>
    2052:	88 ec       	ldi	r24, 0xC8	; 200
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9c 83       	std	Y+4, r25	; 0x04
    2058:	8b 83       	std	Y+3, r24	; 0x03
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <main+0x1be>
    2062:	9c 83       	std	Y+4, r25	; 0x04
    2064:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2066:	8d 81       	ldd	r24, Y+5	; 0x05
    2068:	9e 81       	ldd	r25, Y+6	; 0x06
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2070:	8d 81       	ldd	r24, Y+5	; 0x05
    2072:	9e 81       	ldd	r25, Y+6	; 0x06
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	69 f7       	brne	.-38     	; 0x2052 <main+0x1b2>
    2078:	26 cf       	rjmp	.-436    	; 0x1ec6 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207a:	6f 81       	ldd	r22, Y+7	; 0x07
    207c:	78 85       	ldd	r23, Y+8	; 0x08
    207e:	89 85       	ldd	r24, Y+9	; 0x09
    2080:	9a 85       	ldd	r25, Y+10	; 0x0a
    2082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	9a 83       	std	Y+2, r25	; 0x02
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <main+0x1fa>
    209e:	9a 83       	std	Y+2, r25	; 0x02
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	11 cf       	rjmp	.-478    	; 0x1ec6 <main+0x26>

000020a4 <__divmodhi4>:
    20a4:	97 fb       	bst	r25, 7
    20a6:	09 2e       	mov	r0, r25
    20a8:	07 26       	eor	r0, r23
    20aa:	0a d0       	rcall	.+20     	; 0x20c0 <__divmodhi4_neg1>
    20ac:	77 fd       	sbrc	r23, 7
    20ae:	04 d0       	rcall	.+8      	; 0x20b8 <__divmodhi4_neg2>
    20b0:	0c d0       	rcall	.+24     	; 0x20ca <__udivmodhi4>
    20b2:	06 d0       	rcall	.+12     	; 0x20c0 <__divmodhi4_neg1>
    20b4:	00 20       	and	r0, r0
    20b6:	1a f4       	brpl	.+6      	; 0x20be <__divmodhi4_exit>

000020b8 <__divmodhi4_neg2>:
    20b8:	70 95       	com	r23
    20ba:	61 95       	neg	r22
    20bc:	7f 4f       	sbci	r23, 0xFF	; 255

000020be <__divmodhi4_exit>:
    20be:	08 95       	ret

000020c0 <__divmodhi4_neg1>:
    20c0:	f6 f7       	brtc	.-4      	; 0x20be <__divmodhi4_exit>
    20c2:	90 95       	com	r25
    20c4:	81 95       	neg	r24
    20c6:	9f 4f       	sbci	r25, 0xFF	; 255
    20c8:	08 95       	ret

000020ca <__udivmodhi4>:
    20ca:	aa 1b       	sub	r26, r26
    20cc:	bb 1b       	sub	r27, r27
    20ce:	51 e1       	ldi	r21, 0x11	; 17
    20d0:	07 c0       	rjmp	.+14     	; 0x20e0 <__udivmodhi4_ep>

000020d2 <__udivmodhi4_loop>:
    20d2:	aa 1f       	adc	r26, r26
    20d4:	bb 1f       	adc	r27, r27
    20d6:	a6 17       	cp	r26, r22
    20d8:	b7 07       	cpc	r27, r23
    20da:	10 f0       	brcs	.+4      	; 0x20e0 <__udivmodhi4_ep>
    20dc:	a6 1b       	sub	r26, r22
    20de:	b7 0b       	sbc	r27, r23

000020e0 <__udivmodhi4_ep>:
    20e0:	88 1f       	adc	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	5a 95       	dec	r21
    20e6:	a9 f7       	brne	.-22     	; 0x20d2 <__udivmodhi4_loop>
    20e8:	80 95       	com	r24
    20ea:	90 95       	com	r25
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	08 95       	ret

000020f2 <__prologue_saves__>:
    20f2:	2f 92       	push	r2
    20f4:	3f 92       	push	r3
    20f6:	4f 92       	push	r4
    20f8:	5f 92       	push	r5
    20fa:	6f 92       	push	r6
    20fc:	7f 92       	push	r7
    20fe:	8f 92       	push	r8
    2100:	9f 92       	push	r9
    2102:	af 92       	push	r10
    2104:	bf 92       	push	r11
    2106:	cf 92       	push	r12
    2108:	df 92       	push	r13
    210a:	ef 92       	push	r14
    210c:	ff 92       	push	r15
    210e:	0f 93       	push	r16
    2110:	1f 93       	push	r17
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	ca 1b       	sub	r28, r26
    211c:	db 0b       	sbc	r29, r27
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	09 94       	ijmp

0000212a <__epilogue_restores__>:
    212a:	2a 88       	ldd	r2, Y+18	; 0x12
    212c:	39 88       	ldd	r3, Y+17	; 0x11
    212e:	48 88       	ldd	r4, Y+16	; 0x10
    2130:	5f 84       	ldd	r5, Y+15	; 0x0f
    2132:	6e 84       	ldd	r6, Y+14	; 0x0e
    2134:	7d 84       	ldd	r7, Y+13	; 0x0d
    2136:	8c 84       	ldd	r8, Y+12	; 0x0c
    2138:	9b 84       	ldd	r9, Y+11	; 0x0b
    213a:	aa 84       	ldd	r10, Y+10	; 0x0a
    213c:	b9 84       	ldd	r11, Y+9	; 0x09
    213e:	c8 84       	ldd	r12, Y+8	; 0x08
    2140:	df 80       	ldd	r13, Y+7	; 0x07
    2142:	ee 80       	ldd	r14, Y+6	; 0x06
    2144:	fd 80       	ldd	r15, Y+5	; 0x05
    2146:	0c 81       	ldd	r16, Y+4	; 0x04
    2148:	1b 81       	ldd	r17, Y+3	; 0x03
    214a:	aa 81       	ldd	r26, Y+2	; 0x02
    214c:	b9 81       	ldd	r27, Y+1	; 0x01
    214e:	ce 0f       	add	r28, r30
    2150:	d1 1d       	adc	r29, r1
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	ed 01       	movw	r28, r26
    215e:	08 95       	ret

00002160 <atoi>:
    2160:	fc 01       	movw	r30, r24
    2162:	88 27       	eor	r24, r24
    2164:	99 27       	eor	r25, r25
    2166:	e8 94       	clt
    2168:	21 91       	ld	r18, Z+
    216a:	20 32       	cpi	r18, 0x20	; 32
    216c:	e9 f3       	breq	.-6      	; 0x2168 <atoi+0x8>
    216e:	29 30       	cpi	r18, 0x09	; 9
    2170:	10 f0       	brcs	.+4      	; 0x2176 <atoi+0x16>
    2172:	2e 30       	cpi	r18, 0x0E	; 14
    2174:	c8 f3       	brcs	.-14     	; 0x2168 <atoi+0x8>
    2176:	2b 32       	cpi	r18, 0x2B	; 43
    2178:	41 f0       	breq	.+16     	; 0x218a <atoi+0x2a>
    217a:	2d 32       	cpi	r18, 0x2D	; 45
    217c:	39 f4       	brne	.+14     	; 0x218c <atoi+0x2c>
    217e:	68 94       	set
    2180:	04 c0       	rjmp	.+8      	; 0x218a <atoi+0x2a>
    2182:	0e 94 ef 10 	call	0x21de	; 0x21de <__mulhi_const_10>
    2186:	82 0f       	add	r24, r18
    2188:	91 1d       	adc	r25, r1
    218a:	21 91       	ld	r18, Z+
    218c:	20 53       	subi	r18, 0x30	; 48
    218e:	2a 30       	cpi	r18, 0x0A	; 10
    2190:	c0 f3       	brcs	.-16     	; 0x2182 <atoi+0x22>
    2192:	1e f4       	brtc	.+6      	; 0x219a <atoi+0x3a>
    2194:	90 95       	com	r25
    2196:	81 95       	neg	r24
    2198:	9f 4f       	sbci	r25, 0xFF	; 255
    219a:	08 95       	ret

0000219c <itoa>:
    219c:	fb 01       	movw	r30, r22
    219e:	9f 01       	movw	r18, r30
    21a0:	e8 94       	clt
    21a2:	42 30       	cpi	r20, 0x02	; 2
    21a4:	c4 f0       	brlt	.+48     	; 0x21d6 <itoa+0x3a>
    21a6:	45 32       	cpi	r20, 0x25	; 37
    21a8:	b4 f4       	brge	.+44     	; 0x21d6 <itoa+0x3a>
    21aa:	4a 30       	cpi	r20, 0x0A	; 10
    21ac:	29 f4       	brne	.+10     	; 0x21b8 <itoa+0x1c>
    21ae:	97 fb       	bst	r25, 7
    21b0:	1e f4       	brtc	.+6      	; 0x21b8 <itoa+0x1c>
    21b2:	90 95       	com	r25
    21b4:	81 95       	neg	r24
    21b6:	9f 4f       	sbci	r25, 0xFF	; 255
    21b8:	64 2f       	mov	r22, r20
    21ba:	77 27       	eor	r23, r23
    21bc:	0e 94 65 10 	call	0x20ca	; 0x20ca <__udivmodhi4>
    21c0:	80 5d       	subi	r24, 0xD0	; 208
    21c2:	8a 33       	cpi	r24, 0x3A	; 58
    21c4:	0c f0       	brlt	.+2      	; 0x21c8 <itoa+0x2c>
    21c6:	89 5d       	subi	r24, 0xD9	; 217
    21c8:	81 93       	st	Z+, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	a1 f7       	brne	.-24     	; 0x21b8 <itoa+0x1c>
    21d0:	16 f4       	brtc	.+4      	; 0x21d6 <itoa+0x3a>
    21d2:	5d e2       	ldi	r21, 0x2D	; 45
    21d4:	51 93       	st	Z+, r21
    21d6:	10 82       	st	Z, r1
    21d8:	c9 01       	movw	r24, r18
    21da:	0c 94 f7 10 	jmp	0x21ee	; 0x21ee <strrev>

000021de <__mulhi_const_10>:
    21de:	7a e0       	ldi	r23, 0x0A	; 10
    21e0:	97 9f       	mul	r25, r23
    21e2:	90 2d       	mov	r25, r0
    21e4:	87 9f       	mul	r24, r23
    21e6:	80 2d       	mov	r24, r0
    21e8:	91 0d       	add	r25, r1
    21ea:	11 24       	eor	r1, r1
    21ec:	08 95       	ret

000021ee <strrev>:
    21ee:	dc 01       	movw	r26, r24
    21f0:	fc 01       	movw	r30, r24
    21f2:	67 2f       	mov	r22, r23
    21f4:	71 91       	ld	r23, Z+
    21f6:	77 23       	and	r23, r23
    21f8:	e1 f7       	brne	.-8      	; 0x21f2 <strrev+0x4>
    21fa:	32 97       	sbiw	r30, 0x02	; 2
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <strrev+0x18>
    21fe:	7c 91       	ld	r23, X
    2200:	6d 93       	st	X+, r22
    2202:	70 83       	st	Z, r23
    2204:	62 91       	ld	r22, -Z
    2206:	ae 17       	cp	r26, r30
    2208:	bf 07       	cpc	r27, r31
    220a:	c8 f3       	brcs	.-14     	; 0x21fe <strrev+0x10>
    220c:	08 95       	ret

0000220e <_exit>:
    220e:	f8 94       	cli

00002210 <__stop_program>:
    2210:	ff cf       	rjmp	.-2      	; 0x2210 <__stop_program>
